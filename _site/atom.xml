<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="http://localhost:4000/atom.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2020-11-21T19:50:25+08:00</updated><id>http://localhost:4000/atom.xml</id><title type="html">Xullnn’s words</title><subtitle>You can't do much carpentry with your bare hands and you can't do much thinking with your bare brain.</subtitle><author><name>Xullnn</name></author><entry><title type="html">On exploring Promise 2: possible overlooked points about promise</title><link href="http://localhost:4000/work/promise2-key-points/" rel="alternate" type="text/html" title="On exploring Promise 2: possible overlooked points about promise" /><published>2020-08-28T00:00:00+08:00</published><updated>2020-08-28T00:00:00+08:00</updated><id>http://localhost:4000/work/promise2-key-points</id><content type="html" xml:base="http://localhost:4000/work/promise2-key-points/">&lt;p&gt;尝试更好的理解web开发中 Promise 这个工具，第二部分。&lt;/p&gt;

&lt;p&gt;This is part 2 of my exploring on promise. In part 1, I shared my thoughts about “async” and “event loop” as the basis to better understand promise. The main purpose of this part is share some points or say “blind spots” about promise that may impede your understanding of promise.&lt;/p&gt;

&lt;p&gt;After a brief introduction about basic aspects of promise, I’ll share a few links for learning how to use promise. Because have a basic sense about what is promise and how to use it is important for the main discussion in this article. You don’t have to master “promise” after the studies, otherwise there wouldn’t have been this article. I believe many beginners will leave mental gaps after being introduced with promise. Some key points are somehow omitted by most learning materials. Maybe they are too obvious to pros, but
not so obvious to newbies. It’s more of a communication problem. I hope this article can help you recognize a few of these points and help you connect the dots from “async” to “promise”.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Terms in this article&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Based on different contexts, the word “promise” has different meanings, most of the difference can be distinguished with different writing forms but there’re a few subtle ones may not be easily distinguished. In this post “promise” may in the forms of:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;plain lowercase “promise”: the general concept of promise&lt;/li&gt;
  &lt;li&gt;code quoted lowercase &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;promise&lt;/code&gt;: an instance of a promise&lt;/li&gt;
  &lt;li&gt;code quoted uppercase &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Promise&lt;/code&gt;: the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Promise&lt;/code&gt; &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/Promise&quot;&gt;constructor&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;resolve(d)&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fulfill(ed)&lt;/code&gt; are used interchangeably.&lt;/p&gt;

&lt;h3 id=&quot;1-basic-aspects-aboutpromise&quot;&gt;1 Basic aspects about promise&lt;/h3&gt;

&lt;h4 id=&quot;11-sense-of-promise&quot;&gt;1.1 Sense of promise:&lt;/h4&gt;

&lt;p&gt;I want to start with different definitions of promise. For now we don’t have to understand all the terms before we can continue. Here comes the definitions:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://promisesaplus.com/&quot;&gt;Promise/A+&lt;/a&gt;: A promise represents the eventual result of an asynchronous operation. The primary way of interacting with a promise is through its then method, which registers callbacks to receive either a promise’s eventual value or the reason why the promise cannot be fulfilled.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;MDN&lt;/a&gt;: A Promise is a proxy for a value not necessarily known when the promise is created. It allows you to associate handlers with an asynchronous action’s eventual success value or failure reason.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Futures_and_promises&quot;&gt;wikipedia&lt;/a&gt;: In computer science, future, promise, delay, and deferred refer to constructs used for synchronizing program execution in some concurrent programming languages. They describe an object that acts as a proxy for a result that is initially unknown, usually because the computation of its value is not yet complete.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So promise must have something to do with “async”, and it’s a representation/proxy for a future result. Bringing this high level sense of promise into the exploring of promise is necessary.&lt;/p&gt;

&lt;h4 id=&quot;12-use-of-promise&quot;&gt;1.2 use of promise&lt;/h4&gt;

&lt;p&gt;As I said, this part of work(use of promise) is excellently done by some pros, thank them a lot!&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;https://web.dev/promises/&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This article does a thorough explanation about the use of promise with code examples, along with some performance concerns. Inevitably you would come across some unacquainted terms. You can glimpse their definitions on wiki if you want to, but don’t go too deep, focus on “how to use promise” and just get a feel about it. And you may want to read it multiple times as I did.&lt;/p&gt;

&lt;h4 id=&quot;13-states-of-promise&quot;&gt;1.3 States of promise&lt;/h4&gt;

&lt;p&gt;Promise is like a wrapper for asynchronous operations(tasks), and it holds the result of the task and based on how things are going, it stipulates a promise can be in one of &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;three states&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;pending: the initial state, means the task is still processing and we don’t know how things are going so far&lt;/li&gt;
  &lt;li&gt;resolved: means the task is successfully fulfilled, and it may give us something we want such as data or just a message that indicates the task has succeeded.&lt;/li&gt;
  &lt;li&gt;rejected: means the task failed, and reasonably a reason(often an error object) should be given to tell what was wrong&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pending&lt;/code&gt; is when the async operation is still processing, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;resolved(fulfilled)&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rejected&lt;/code&gt; are when the async operation is completed whether succeeded or failed, when a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;promise&lt;/code&gt;’s state is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;resolved(fulfilled)&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rejected&lt;/code&gt;, we also say it’s settled.&lt;/p&gt;

&lt;h3 id=&quot;2-a-few-key-points-that-may-be-overlooked&quot;&gt;2 A few key points that may be overlooked&lt;/h3&gt;

&lt;p&gt;This part mainly shares with you some key points about promise. They are not overlooked by purpose, and you may feel so strange that you haven’t noticed them. Because they are just some basic facts sit there for a long time.&lt;/p&gt;

&lt;h4 id=&quot;21-promise-constructor-is-used-for-creating-promise-then-method-is-used-for-accessing-promise&quot;&gt;2.1 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Promise&lt;/code&gt; constructor is used for creating promise, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;then()&lt;/code&gt; method is used for accessing promise&lt;/h4&gt;

&lt;p&gt;There’s a concise description about the purpose of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Promise&lt;/code&gt; constructor.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/Promise&quot;&gt;The Promise constructor is primarily used to wrap functions that do not already support promises.&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;After reading a lot about how to use promise, we know that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Promise()&lt;/code&gt; can create a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;promise&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;then&lt;/code&gt; is the way to chain subsequent operations. But being aware of the original designing purpose is also important, especially when you ask question like “Since &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Promise()&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;then()&lt;/code&gt; both return a promise, so what’s the difference?”. Maybe we should ask a more basic question: what a constructor is used for in JavaScript?&lt;/p&gt;

&lt;p&gt;The answer is when we want to create a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;promise&lt;/code&gt;, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Promise()&lt;/code&gt; constructor is the first choice, not &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;then()&lt;/code&gt;.We can say &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Promise()&lt;/code&gt; is primarily used to wrap functions that do not already support promises. Or we can say it’s used for “Promisifying” something. And  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;then()&lt;/code&gt; is the way to chain promises, as well as the way to access the value of a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;promise&lt;/code&gt;. Though &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;then()&lt;/code&gt; always returns a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;promise&lt;/code&gt;, we should not treat this behavior as its designing purpose. Seeing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;then()&lt;/code&gt; as the interface to access &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;promise&lt;/code&gt;s is a more appropriate view.&lt;/p&gt;

&lt;h4 id=&quot;22-code-in-promise-executes-as-soon-as-the-promise-is-created&quot;&gt;2.2 Code in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Promise&lt;/code&gt; executes as soon as the promise is created&lt;/h4&gt;

&lt;p&gt;I think this is an important fact but most intro level materials don’t mention. And this trapped me for a long time when I was trying to figure out how to use promise.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;the beginning of creation is the beginning of executing&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If we have a function that returns a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;promise&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;makePromise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;reject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// do sync thing one&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// do sync thing two&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// resolve or reject at a certain point&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When you execute &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;makePromise()&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;thing one&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;thing two&lt;/code&gt; in the callback are beginning execution and are done synchronously immediately. I don’t know why I had a tendency(don’t know if others have too) to think all the code within the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Promise&lt;/code&gt; constructor only begins executing as a whole at the settling point, the point when the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;resolve&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reject&lt;/code&gt; are called. Realizing this is important for us to maintain the execution sequence of tasks and thinking about possible performance considerations.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;order of creation is not the guarantee of order of completion&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If we have a list of urls &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[u1, u2, u3]&lt;/code&gt; that don’t depend on each other, means they can be loaded in parallel. But we want to get things from the 3 urls one after another, in the order of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1,2,3&lt;/code&gt;. We may write something like this:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;requestURL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;reject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;xhr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;XMLHttpRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;xhr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;GET&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;xhr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;load&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;xhr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;u1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;u2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;u3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;requestURL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Although all the requests may succeed but the order of completion is not guaranteed. Why? Because &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;forEach&lt;/code&gt; is sync and what we actually did can be seen as:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;requestURL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;u1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;requestURL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;u2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;requestURL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;u3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;All &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;promise&lt;/code&gt;s begin creating almost at the same time because the 3 function calls are executed synchronously, meanwhile all code within &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Promise&lt;/code&gt; constructor begins executing. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;requestURL&lt;/code&gt; returns a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;promise&lt;/code&gt;, but code written in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Promise&lt;/code&gt; constructor won’t pause executing. So the 3 requests begins at almost the same time but we don’t know how much time each request would take, therefore we don’t know the order completion.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;there’s no waiting among multiple promises created independently&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Since a &lt;strong&gt;promise chain&lt;/strong&gt; will be paused for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pending&lt;/code&gt; promises, it’s easy to transfer this fact(feeling) to the situation when we create multiple &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;promise&lt;/code&gt;s at one time, thinking that lately created &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;promise&lt;/code&gt;s would wait for the earlier ones to be settled. But:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;waiting happens when there’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pending&lt;/code&gt; promise in a chain. You can’t just make a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;promise&lt;/code&gt; independently then “pause” it there, neither from inside nor outside.&lt;/li&gt;
  &lt;li&gt;a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pending&lt;/code&gt; promise never pauses itself. When a promise is created, its original state is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pending&lt;/code&gt;, but from an internal view, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pending&lt;/code&gt; doesn’t mean pausing/waiting. As long as there is call for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;resolve&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reject&lt;/code&gt; thereafter, a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pending&lt;/code&gt; promise is approaching the state of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fulfilled&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rejected&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So creating a bunch of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;promise&lt;/code&gt;s doesn’t mean the latter ones will wait for the earlier ones, doesn’t mean they be completed in the order of creation. Unless you wrap the process of creating promise inside a function(a function returns a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;promise&lt;/code&gt;), then arrange them in a chain. There is a big difference between “creating a promise” and “a function that creates a promise”. Because when we pass “a function that creates a promise” to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;then()&lt;/code&gt;, the creation of promise won’t start before the chain advances to that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;then&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;how to maintain sequence of operations&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;How to chain the requests in a wanted sequence or say initiate them one after another? Also with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;forEach&lt;/code&gt;, but this time a bit different.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;chain&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;resovle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;u1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;u2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;u3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;chain&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;chain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;requestURL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Notice &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;chain.then(() =&amp;gt; requestURL(url))&lt;/code&gt; is different from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;chain.then(requestURL(url))&lt;/code&gt;,  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;requestURL(url)&lt;/code&gt; is a function invocation that will create a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;promise&lt;/code&gt; immediately, you should always pass a &lt;em&gt;function&lt;/em&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;then()&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&quot;23-resolve-happens-immediately&quot;&gt;2.3 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;resolve&lt;/code&gt; happens immediately&lt;/h4&gt;

&lt;p&gt;The same example:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fetchURL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// returns promise&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;reject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;xhr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;XMLHttpRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;xhr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;GET&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;xhr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;load&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;suburl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;xhr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;suburl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is a tricky point. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;resolve&lt;/code&gt; method don’t know how much time a request would take. We call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;resolve&lt;/code&gt; in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Promise&lt;/code&gt; constructor, and that happens inside the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;'load'&lt;/code&gt; event listener. Here &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;resolve(suburl)&lt;/code&gt; has no notion about &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sync/async&lt;/code&gt; it’s called immediately when the request is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;'load'&lt;/code&gt;ed, and calling &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;resolve(suburl)&lt;/code&gt; grants the state &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fulfilled&lt;/code&gt; to the promise with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;suburl&lt;/code&gt; as its value to prepare for possible future operations. And resolving of a promise is synchronous or say happens instantly.&lt;/p&gt;

&lt;p&gt;This may seem obvious after you’ve noticed it. But realizing this fact can fill some mental gaps while trying to understand the using of promise. Since promise is heavily about “async”, it’s easy to forget that there’re also “sync” things there. It’s easy to grumble questions like “how does the promise know when to resolve itself”, the answer is it doesn’t know. Because the “resolving” moment depends on something else such as explicit writing sync code to resolve the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;promise&lt;/code&gt;, like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Promise.resolve()&lt;/code&gt; or call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;resolve&lt;/code&gt; in a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Promise&lt;/code&gt; constructor.&lt;/p&gt;

&lt;p&gt;To me “&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;resolve&lt;/code&gt; happens immediately” is a very useful nonsense.&lt;/p&gt;

&lt;h4 id=&quot;24-function-is-the-only-currency-within-a-promise-chain&quot;&gt;2.4 function is the only currency within a promise chain&lt;/h4&gt;

&lt;p&gt;I think initially we all know that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;then&lt;/code&gt; takes functions as arguments after we learned about the definition and use of promise. But as days roll on, we may want to stuff anything inside that pair of parentheses &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;()&lt;/code&gt; followed by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;then&lt;/code&gt;. Especially things that are not function.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/promises-aplus/promises-spec&quot;&gt;Promise/A+ spec&lt;/a&gt; also mentions that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;then&lt;/code&gt; must return a promise and if &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;onFulfilled&lt;/code&gt; &lt;em&gt;is not a function&lt;/em&gt;, a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;then&lt;/code&gt; called on a resolved promise must return a new promise resolved with the value of the previous promise. It’s better to be expressed by code:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;resolvedPromise&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;One&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 1&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;resolvedPromise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;two&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Line 1 returns a promise resolved with “One”, but line 2 returns a new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;promise&lt;/code&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Promise {&amp;lt;fulfilled&amp;gt;: &quot;One&quot;}&lt;/code&gt; resolved with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;One&quot;&lt;/code&gt; NOT &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;Two&quot;&lt;/code&gt;. The string &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;Two&quot;&lt;/code&gt; we pass the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;then()&lt;/code&gt; is ignored.&lt;/p&gt;

&lt;p&gt;If we make a promise chain with several non-functions inserted for example:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;resolvedPromise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;non&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;non&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We can imagine that we strikethrough the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.then(non-func)&lt;/code&gt; parts like:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://tva1.sinaimg.cn/large/007S8ZIlgy1gig7q4l7irj32a407w3zv.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Some call this “promise fall through”. What if one of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;non-func&lt;/code&gt; is a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;promise&lt;/code&gt;? You may think the promise chain won’t ignore a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;promise&lt;/code&gt;. Let’s try by code:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;resolvedPromise&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;I was resolved&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;starterPromise&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;I am the starter promise.&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;starterPromise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;resolvedPromise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Promise {&amp;lt;fulfilled&amp;gt;: &quot;I am the starter promise.&quot;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The last line returns &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Promise {&amp;lt;fulfilled&amp;gt;: &quot;I am the starter promise.&quot;}&lt;/code&gt;, the resolved value of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;resolvedPromise&lt;/code&gt; we passed to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;then()&lt;/code&gt; was not taken. So there’s no exception for this rule. &lt;em&gt;Function is the only currency within a promise chain&lt;/em&gt;. If you want to insert a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;promise&lt;/code&gt; into a promise chain, use a function that returns a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;promise&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&quot;25-two-kinds-of-waiting-on-promises&quot;&gt;2.5 two kinds of waiting on promises&lt;/h4&gt;

&lt;p&gt;Personally I prefer to understand that there’re actually two kinds of waiting for a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pending&lt;/code&gt; promise. One is wait from “outside”, the other is wait from “inside”.&lt;/p&gt;

&lt;p&gt;Wait from inside” means inside a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Promise&lt;/code&gt; constructor, after a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;promise&lt;/code&gt; is created, it’s initially set to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pending&lt;/code&gt;, and then it’s waiting to be either fulfilled or rejected. This kind of waiting is often neglected. On the contrary, the waiting made by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;then()&lt;/code&gt; is stressed a lot, and this is “wait from outside”. &lt;em&gt;Both kinds of waitings wait on a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;promise&lt;/code&gt; to transit from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pending&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fulfilled/rejected&lt;/code&gt;&lt;/em&gt;, but they are different. Having a notion of this helped me better understand the states of promise as well as the behavior of a promise chain.&lt;/p&gt;

&lt;h5 id=&quot;251-how-to-make-a-pending-promise&quot;&gt;2.5.1 how to make a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pending&lt;/code&gt; promise?&lt;/h5&gt;

&lt;p&gt;This is fun and easy. Remember I said when trying to create a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;promise&lt;/code&gt; always consider &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Promise&lt;/code&gt; constructor? So the answer of this is “just make it but don’t resolve it”. That is:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pendingPromise&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;reject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{});&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Promise {&amp;lt;pending&amp;gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;By doing this we get a pending promise &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Promise {&amp;lt;pending&amp;gt;}&lt;/code&gt; since we don’t call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;resolve()&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reject()&lt;/code&gt; at all inside the callback. Another theoretically possible scenario is we called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;resolve()&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reject()&lt;/code&gt; but the time before that happens was “forever”. For example, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;resolve()&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reject()&lt;/code&gt; is waiting to be called after a data retrieving task that never ends.&lt;/p&gt;

&lt;h5 id=&quot;252-pauses-on-thens-are-visible&quot;&gt;2.5.2 pauses on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;then&lt;/code&gt;s are “visible”&lt;/h5&gt;

&lt;p&gt;Now if we have a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pending&lt;/code&gt; promise, let’s see how the chain will pause:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pendingPromise&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;reject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{});&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Promise {&amp;lt;pending&amp;gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;pendingPromise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Hello World.&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Not words printed out&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;//  ^&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;//paused&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Since &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pendingPromise&lt;/code&gt; is at the state of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pending&lt;/code&gt;, the next &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;then&lt;/code&gt; will wait on it. I often see words like “waiting on a promise”, though this is not wrong, but this gives us a sense that where there is a promise there is a waiting. But waiting only happens on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pending&lt;/code&gt; promise.&lt;/p&gt;

&lt;h5 id=&quot;253-then-only-waits-on-pending-promises-doesnt-mean-settled-ones-are-skipped&quot;&gt;2.5.3 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;then()&lt;/code&gt; only waits on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pending&lt;/code&gt; promises doesn’t mean settled ones are skipped&lt;/h5&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;one&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;two&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Promise {&amp;lt;fulfilled&amp;gt;: &quot;two&quot;}&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;one&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;two&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;three&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Promise {&amp;lt;fulfilled&amp;gt;: &quot;three&quot;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here both lines start with a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;promise&lt;/code&gt; resolved with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;one&quot;&lt;/code&gt;. When we chain one &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;then&lt;/code&gt; we get a new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;promise&lt;/code&gt; resolved with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;two&quot;&lt;/code&gt;. When chain two &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;then&lt;/code&gt;s we get a new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;promise&lt;/code&gt; resolved with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;three&quot;&lt;/code&gt;. Based on line 1 we know there is a “middle promise” with “two” as its value existed transitorily. But no &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;promise&lt;/code&gt; is skipped even through they are resolved ones.&lt;/p&gt;

&lt;p&gt;If we configure a promise chain appropriately, of course the chain will wait on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pending&lt;/code&gt; promises, but the chain also won’t forget to go through every &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fulfilled&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rejected&lt;/code&gt; ones.&lt;/p&gt;

&lt;h3 id=&quot;3-try-to-nurture-intimacy-with-standard&quot;&gt;3 Try to nurture intimacy with standard&lt;/h3&gt;

&lt;p&gt;This is more of a suggestion than another key point, but I think it’s important for learning promise too.
If you’ve ever explored some articles about promise, you may have been introduced with the &lt;a href=&quot;https://promisesaplus.com/&quot;&gt;Promise/A+&lt;/a&gt; standard, I mentioned it several times in this article. As it states, it’s:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;An open standard for sound, interoperable JavaScript promises—by implementers, for implementers.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In that page, there are just several sections of structured rules. So promise is more of a model, it’s not some hard-coded packages. The rules describe how to implement promise, but there doesn’t exist a single right way to implement it. This is very similar to what we talk about the mental model of event loop. Actually if you have known the basic aspects of promise and are using the correct terms, reading the standard is more helpful when you are confused by “promise puzzles”. The standard is really boring, but it’s also very reliable.&lt;/p&gt;

&lt;h3 id=&quot;4-summary&quot;&gt;4 Summary&lt;/h3&gt;

&lt;p&gt;In this 2-part article, I think the important takeaway are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;the separation of async and sync is for better coordinating different tasks, and event loop model is one way to do the coordinating work.&lt;/li&gt;
  &lt;li&gt;differentiate sync and async part when using promise; there are two kinds of wait for a pending promise; function is the only currency in a promise chain.&lt;/li&gt;
  &lt;li&gt;try to nurture intimacy with standards and docs.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We’ve been through a long journey from setTimeout to Promise. In part 1, we spend most time discussing what is sync and async, and how they are coordinated by the event loop model. Although we barely mentioned promise in part 1 but all the discussion there will support our understanding of promise. In this part 2, I don’t write about how to use promise, instead I focus on some key points that may be missed during the process of learning promise. Hope this can help you a bit on the journey of exploring promise.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;em&gt;References:&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;https://web.dev/promises/&lt;/p&gt;

&lt;p&gt;https://pouchdb.com/2015/05/18/we-have-a-problem-with-promises.html&lt;/p&gt;

&lt;p&gt;https://en.wikipedia.org/wiki/Futures_and_promises&lt;/p&gt;

&lt;p&gt;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/Promise&lt;/p&gt;

&lt;p&gt;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise&lt;/p&gt;

&lt;p&gt;https://promisesaplus.com/&lt;/p&gt;

&lt;p&gt;https://stackoverflow.com/questions/31324110/why-does-the-promise-constructor-require-a-function-that-calls-resolve-when-co&lt;/p&gt;

&lt;p&gt;https://stackoverflow.com/questions/22519784/how-do-i-convert-an-existing-callback-api-to-promises&lt;/p&gt;</content><author><name>Xullnn</name></author><category term="Work" /><category term="programming" /><summary type="html">尝试更好的理解web开发中 Promise 这个工具，第二部分。</summary></entry><entry><title type="html">On exploring Promise 1: thoughts about async and event loop model</title><link href="http://localhost:4000/work/promise1-async-and-event-loop/" rel="alternate" type="text/html" title="On exploring Promise 1: thoughts about async and event loop model" /><published>2020-08-28T00:00:00+08:00</published><updated>2020-08-28T00:00:00+08:00</updated><id>http://localhost:4000/work/promise1-async-and-event-loop</id><content type="html" xml:base="http://localhost:4000/work/promise1-async-and-event-loop/">&lt;p&gt;尝试更好的理解web开发中 Promise 这个工具，第一部分。&lt;/p&gt;

&lt;h3 id=&quot;1-from-settimeout-to-promise&quot;&gt;1 From &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setTimeout&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Promise&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;I remember vividly when I first stumbled on the term “asynchronous”, the first thing jumped into my head was it must have something to do with my mobile phone” since I often &lt;em&gt;synchronize&lt;/em&gt; my phone with my Mac. And our general notion about &lt;a href=&quot;https://en.wikipedia.org/wiki/Synchronization&quot;&gt;sychronization&lt;/a&gt; is that is a process that coordinates different parts of something in unison. So it’s easy to think &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;async&lt;/code&gt; as “to make things not to happen at the same time”, but this is a bit different from what &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;async&lt;/code&gt; means in web development.&lt;/p&gt;

&lt;p&gt;As I kept learning programming, I had more and more terms about sync/async collected, such as “concurrency”, “process”, “main thread”, “promise”, “async function”. Then I knew I can’t jump on a time machine then travel back to the happy days when I just knew about how to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setTimeout()&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setInterval()&lt;/code&gt;. And this feeling culminated when I tried to understand how &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Promise&lt;/code&gt; works with JavaScript. And I did spend a lot of time trying to understand how &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Promise&lt;/code&gt; works. (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Promise&lt;/code&gt; refers to the general concept of promise in this article).&lt;/p&gt;

&lt;p&gt;Most learning materials about &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Promise&lt;/code&gt; out there focus on how to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Promise&lt;/code&gt; and how good it is. When we just got a bit familiar and comfortable with some basic use of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setTimeout()&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setInterval()&lt;/code&gt;, as well as some basic use of &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest&quot;&gt;XHR&lt;/a&gt;. Then lots of people come to say “you know what, we’ve gotten a better tool to deal with async tasks, it’s called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Promise&lt;/code&gt;”. After a while some other people tell you “you should try &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;async function&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fetch&lt;/code&gt; API, they are promise-based, they are awesome!”. As a diligent student, you paid a lot of time reading through materials and going through the code examples again and again. But, you are still not so sure about how to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Promise&lt;/code&gt; as well as all the promise-based techniques. Why? I think there are several reasons:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;ol&gt;
      &lt;li&gt;don’t have a decent understanding of “async”, or think it as a very complicated concept&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;ol&gt;
      &lt;li&gt;don’t know how the browsers coordinate sync and async tasks&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;ol&gt;
      &lt;li&gt;people who write introductions about &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Promise&lt;/code&gt; assume that all readers have known &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2&lt;/code&gt;,  also some key points about &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Promise&lt;/code&gt; are not noticed by beginners, therefore some mental gaps persist in the understanding of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Promise&lt;/code&gt;.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I’ll try to write a 2-part article to explore these points. The first part will focus on general idea of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;async&lt;/code&gt; and mental model of “event loop”, the second part will share some key points I realized very late during my journey of learning &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Promise&lt;/code&gt;. I don’t write too much about “how to use Promise”, because there’re many excellent materials about this on the internet, I think they do better than me.&lt;/p&gt;

&lt;h3 id=&quot;2-a-simple-understanding-of-async&quot;&gt;2 A simple understanding of “async”&lt;/h3&gt;

&lt;p&gt;In fact it won’t be so simple, otherwise I wouldn’t have written these things hah. I have to confest that it needs patience to gain a well enough understanding of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Promise&lt;/code&gt;, because it relates to many other concepts. And it’s almost impossible to understand a concept without knowing other related ones. As &lt;a href=&quot;https://en.wikipedia.org/wiki/Daniel_Dennett&quot;&gt;Daniel Dennett&lt;/a&gt; would say:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“You can’t believe a dog has four legs without believing that legs are limbs and four is greater than three, etc.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;21-a-feeling-about-async&quot;&gt;2.1 A feeling about async&lt;/h4&gt;

&lt;p&gt;Some of us make breakfast as a daily routine. Although everyone has his/her own preference, but if you don’t change your breakfast too often as I do, you may prepare it in a relatively fixed procedure. As a lazy one, most of the time I have these as my breakfast: a cup of drip coffee, 2 boiled eggs, 1 sweet potato. And here’re what I need to do(with time consumptions) every morning:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;heat water for brewing coffee (4 mins&lt;/li&gt;
  &lt;li&gt;brew drip coffee (3 mins&lt;/li&gt;
  &lt;li&gt;boil eggs (10 mins&lt;/li&gt;
  &lt;li&gt;heat potato(pre-boiled and frozen) with microwave oven (2 mins&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Intuitively we probably won’t do these tasks sequentially. For example, when we are boiling eggs, we won’t stare at the pot seeing the water boiling gradually and doing nothing else. Thus it may take us &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;3 + 4 + 10 + 2 = 19&lt;/code&gt; minutes to make the breakfast. We all know we can do something else while we have started some previous tasks, especially some time-consuming tasks. Or we can say some tasks can be handled in parallel. One way to do things in this style may be like this:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;|-------------- boil eggs --------------|
 |- heat potato -|
  |--- heat water ---|
                      |- brew coffee -|
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;By doing this we can have our breakfast only after 10 minutes. And the purpose of rearranging these tasks is similar to the purpose of “async” in programming.&lt;/p&gt;

&lt;p&gt;Let’s look at 2 description about async:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Asynchronous&quot;&gt;“asynchronous”&lt;/a&gt; from MDN:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Asynchronous software design expands upon the concept by building code that allows a program to ask that a task be performed alongside the original task (or tasks), without stopping to wait for the task to complete.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The definition of “asynchrony” on &lt;a href=&quot;https://en.wikipedia.org/wiki/Asynchrony_(computer_programming)&quot;&gt;wikipedia&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Asynchrony, in computer programming, refers to the occurrence of events independent of the main program flow and ways to deal with such events.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;No matter it’s the “main/original” task or the “other/independent” tasks, they are just some tasks. &lt;em&gt;And “async” is just the way to coordinate these tasks so that they can be executed correctly and effectively.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;But what’s the difference between “sync” and “async”? They are often involved with each other. When we say some code is executed synchronous we often mean that code is executed immediately and sequentially. And when we mention “async”, it often implies that some “async” tasks deviate from the “sync” part to be execute somewhere else without disturbing “sync” part. But on the other side, there may be “sync” part resides in the “async” part.&lt;/p&gt;

&lt;p&gt;We can first apply an oversimplified view of how sync and async are coordinated in a browser. That is, first handle the the sync things, then the async part.&lt;/p&gt;

&lt;h4 id=&quot;22-an-oversimplified-view-async-goes-after-sync&quot;&gt;2.2 an oversimplified view: async goes after sync&lt;/h4&gt;

&lt;p&gt;A good starting point to develop a realization about the existence of sync and async in JavaScript is the “zero-delay” example with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setTimeout&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;I am the first line.&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// this line is only added for increasing the time consumption in between&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000000000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{};&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;I am the last line.&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If we don’t have any notion about async with JavaScript we may expect the two messages to be printed out sequentially, just as the order they were written in code. However in this case, though the time delay of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setTimeout&lt;/code&gt; is set to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt;, plus that we add a time-consuming operation in between, the message in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setTimeout&lt;/code&gt; callback always goes after the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;I am the last line.&quot;&lt;/code&gt;. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt; didn’t make sure &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;I am the first line.&quot;&lt;/code&gt; to be printed out right away. Because callback wrapped by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setTimeout&lt;/code&gt; will be executed asynchronously. An oversimplified description of how this works is: the async part is executed after the sync part has finished executing. The async part here is the callback passed to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setTimeout&lt;/code&gt;, everything else is the sync part. This is a typical example to prove the existence of sync and async parts.&lt;/p&gt;

&lt;p&gt;But who makes the callback asynchronous? It’s the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setTimeout&lt;/code&gt; API. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Promise&lt;/code&gt; also, has similar feature. Let’s change the code example to use Promise:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;I am the first line.&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;      &lt;span class=&quot;c1&quot;&gt;// 1&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// this line is only added for increase the time consuption in between&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000000000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{};&lt;/span&gt;                               &lt;span class=&quot;c1&quot;&gt;// 2&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;I am the last line.&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// this always gets printed out first // 3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The only change made here is the way we wrap the callback. And we get the messages printed out in the same order as the zero-delay one. For now we don’t have to worry about what does the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Promise.resolve(&quot;&quot;)&lt;/code&gt; do, just try to realize there is a distinction between sync and async, and the execution of sync and async code is coordinated in a certain way by the browser. It can be oversimplified as “async goes after sync”.&lt;/p&gt;

&lt;h4 id=&quot;23-why-the-separation-of-sync-and-async-makes-sense&quot;&gt;2.3 why the separation of sync and async makes sense&lt;/h4&gt;

&lt;p&gt;Let’s recall the line &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;for(let i = 0; i &amp;lt; 1000000000; i += 1 ) {};&lt;/code&gt;. This line may take several or more seconds to run in browser, that’s why the two messages are both printed out after a short delay. Since sync code is executed sequentially which means lines of code are executed one after another, if there’s some code that may take a very long time to finish running, all the code after that will wait for it. If we apply this scenario to the script behind a webpage(or say a tab of the browser), when some sync code is continuously executing, the page will get stuck and you’ll find that you can do nothing with the page, it’s just blocked. As we add more &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt;s to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i &amp;lt; 1000000000&lt;/code&gt;, the blocking time would increase at a substantial rate. It’s just like the example of making breakfast, if all things have to be done one after another and boiling eggs needed 2 hours, a lot of time could be wasted.&lt;/p&gt;

&lt;p&gt;A sensible way is to go through and set up all tasks as soon as possible, then outsource tasks that are time-consuming to somewhere else, just like how we change the way we make breakfast. Now take the code of incrementing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i&lt;/code&gt; from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1000000000&lt;/code&gt;, we can move it from the sync part to async part to eliminate the blocking experience in between. We can use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setTimeout&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Promise&lt;/code&gt; to do this:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;I am the first line.&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;      &lt;span class=&quot;c1&quot;&gt;// 1&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// we can also do Promise.resolve(&quot;&quot;).then(() =&amp;gt; for(let i = 0; i &amp;lt; 1000000000; i += 1 ) {});&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000000000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}},&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;       &lt;span class=&quot;c1&quot;&gt;// 2&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;I am the last line.&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// this always gets printed out first // 3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now the messages’ printing order doesn’t change, but the short period time of blocking disappears. Actually it doesn’t disappear, it’s just moved to the end of the execution. Because “async part goes after sync part”, and we turned the counting operation into async task, so it’s moved to the end of all the sync tasks. We can prove this by adding 2 or 3 more &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt;s to the number then see if the browser is blocked after printing out the two messages.&lt;/p&gt;

&lt;h4 id=&quot;24-to-be-sync-or-to-be-async&quot;&gt;2.4 to be sync or to be async&lt;/h4&gt;

&lt;p&gt;Many tasks can be time-consuming like the counting number one, others like retrieving data from remote server, processing large amount of data. The separation of sync and async is just really a way to optimize the coordination of different tasks to provide user a smoother experience.&lt;/p&gt;

&lt;p&gt;And of course not all async tasks will block the browser. Some kinds of async tasks may need a long time to perform, they may be handled by other parts of the browser and happen somewhere else. Blocking the browser in the middle or in the end is not always the case. The take away is there is a separation between sync and async, but the purpose of the making the separation is to find a way of better coordinating different kinds of tasks. Actually, the separation of sync and async are only made by humans conceptually, they both are just code, a time-consuming calculation can be set to sync, a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;console.log()&lt;/code&gt; task can be set to async, it all depends on you, the person who writes the code.
Counting to 1 billion may be slow now so we want to make it async. But what about 10 years later when the computation ability of our devices increase substantially, when downloading data of 100G only takes a few ms? At that time maybe nobody remembers sync/async because we have a very different notion about slow and fast, and we have new ways of doing things.&lt;/p&gt;

&lt;p&gt;Back to our discussion……Async code goes after sync code, but how these two parts are coordinated in the browser, how this task is achieved? The answer is the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/EventLoop&quot;&gt;event loop model&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;3-mental-model-of-event-loop--the-mechanism-to-coordinate-sync-and-async-tasks&quot;&gt;3 Mental model of Event Loop – the mechanism to coordinate sync and async tasks&lt;/h3&gt;

&lt;p&gt;Imagine &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;async code goes after sync code&lt;/code&gt; is a chunk of code in a function block, such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;function cycle() { async code goes after sync code }&lt;/code&gt;. We put this code into a loop, then we get the “Event Loop” such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;while(true) { cycle() }&lt;/code&gt;. Of course things are not so simple but it’s also not so complicated.&lt;/p&gt;

&lt;h4 id=&quot;31-a-feel-about-event-loop&quot;&gt;3.1 a feel about event loop&lt;/h4&gt;

&lt;p&gt;First let’s check 2 descriptions about event loop.&lt;/p&gt;

&lt;p&gt;According to &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/EventLoop&quot;&gt;MDN&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;JavaScript has a concurrency model based on an event loop, which is responsible for executing the code, collecting and processing events, and executing queued sub-tasks. This model is quite different from models in other languages like C and Java.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;According to &lt;a href=&quot;https://html.spec.whatwg.org/dev/webappapis.html#event-loops&quot;&gt;whatwg&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;To coordinate events, user interaction, scripts, rendering, networking, and so forth, user agents must use event loops as described in this section. Each agent has an associated event loop, which is unique to that agent.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Forget about these intimidating terms, just get a feel about it. But remember that “sync/async are just ways of coordinating different tasks”.&lt;/p&gt;

&lt;h4 id=&quot;32-a-demonstration-about-how-event-loop-operates-in-browser&quot;&gt;3.2 A demonstration about how event loop operates in browser&lt;/h4&gt;

&lt;p&gt;I prefer understanding event loop from a more demonstrating way, a good explanation is the video &lt;a href=&quot;https://www.youtube.com/watch?v=8aGhZQkoFbQ&quot;&gt;What the heck is the event loop anyway?&lt;/a&gt; by Philip Roberts.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;And you should really mentally go through the process demonstrated in the video before we can continue.&lt;/em&gt;&lt;/p&gt;

&lt;h4 id=&quot;33-components-of-event-loop&quot;&gt;3.3 Components of event loop&lt;/h4&gt;

&lt;p&gt;One important thing we need to clarify is the relationship among JavaScript language, the browser, and the event loop. The browser is more than JavaScript language. JavaScript is just a core component of the browser, it’s like the engine of it. The browser actually provides a whole suite of components to maintain an environment for the event loop model to be implemented. Let’s zoom in to look at the components of event loop model:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;the main thread/stack: as the word “main” indicates, that’s where we run our main tasks, or we can think of it as a place to run sync code&lt;/li&gt;
  &lt;li&gt;a task queue: it’s a place queued with tasks that are waiting to be executed in the main thread when the main thread is clear.&lt;/li&gt;
  &lt;li&gt;web apis: the tools provided by the browser to schedule tasks sent from the main thread to the task queue&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To put these components in operation, the event loop acts as an observer. It keeps an eye on the main thread, if all the tasks there are finished running, it let the oldest(the one that got queued earliest) task in the task queue pop out into the main thread, and then execute it, then the second earliest one, so on and so forth.&lt;/p&gt;

&lt;h4 id=&quot;34-run-event-loop&quot;&gt;3.4 run, event loop&lt;/h4&gt;

&lt;p&gt;Let’s review the code example:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;I am the first line.&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;          &lt;span class=&quot;c1&quot;&gt;// 1&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000000000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{};&lt;/span&gt;                            &lt;span class=&quot;c1&quot;&gt;// 2&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;I am the last line.&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;                                    &lt;span class=&quot;c1&quot;&gt;// 3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Except for the callback passed to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setTimeout&lt;/code&gt; at line 1, all other code is synchronous, which means they be executed first, line by line from top to bottom.&lt;/p&gt;

&lt;p&gt;Imagine that we first go through all the code. When code goes to line 1, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setTimeout&lt;/code&gt; will set the callback aside to a scheduler or say timer, then the code in the main thread goes on executing, when code in the main thread has finished running, the scheduler(timer) starts counting for 0 second, then the callback will be put in the task queue. The work of event loop is to look at the main thread, if all sync code has finished running there, the first(oldest) task got queued in the task queue will be popped out then pushed in the main thread and be executed. And this process keeps running as if it’s a “loop”.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://tva1.sinaimg.cn/large/007S8ZIlgy1gienkh1pi4g30hs0hsb2d.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The event loop model explains why zero-delay callback doesn’t have a real zero-delay. Because based on how the event loop operates, the real time delay is the never shorter than the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;execution time of the main thread&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&quot;35-problem-intention-concept-implementation&quot;&gt;3.5 Problem, intention, concept, implementation&lt;/h4&gt;

&lt;p&gt;The event loop model was designed for solving certain kinds of problems. Different materials about event loop may introduce different terms like “stack”, “heap”, “main thread”, “queue”, “task queue”, “micro-task queue”, “macro-task queue”, and it’s tempting to dig deeper on these things. But we should realize the “Event Loop” is not a standard way of solving a problem, it’s an abstract model, it’s written &lt;a href=&quot;https://html.spec.whatwg.org/multipage/webappapis.html#event-loops&quot;&gt;in the standard&lt;/a&gt;, but there isn’t a single right way to implement it. Implementation details of event loop in one browser like say &lt;a href=&quot;https://en.wikipedia.org/wiki/Google_Chrome&quot;&gt;Google Chrome&lt;/a&gt; may be so different from others. What’s in common is the event loop model. And If we see “ways of coordinating sync/async tasks” as a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Class&lt;/code&gt;, then the mental model of “Event Loop” is a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Subclass&lt;/code&gt; of it, and the implementation of event loop model for a specific browser is an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;instance&lt;/code&gt; of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Subclass&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If we understand event loop correctly at a high level, we can confidently predict how the sync and async code will be operated within an app, and write code with confidence.&lt;/p&gt;

&lt;h3 id=&quot;4-summary&quot;&gt;4 Summary&lt;/h3&gt;

&lt;p&gt;Now we know the distinction between sync and async is not made by the code itself. “Async” is more of ways to coordinate various tasks, it’s more of choices made by programmer.&lt;/p&gt;

&lt;p&gt;Event loop is a way of coordinating different tasks in browsers. Although we ignored most implementation details to only keep an abstract mental model, but this model is quite reliable at this stage for us to set off the journey towards Promise. And above the concept of async, promises are all about making asynchronous code more readable and behave like synchronous code.&lt;/p&gt;</content><author><name>Xullnn</name></author><category term="Work" /><category term="programming" /><summary type="html">尝试更好的理解web开发中 Promise 这个工具，第一部分。</summary></entry><entry><title type="html">Widgets of 2020</title><link href="http://localhost:4000/life/widgets-of-2020/" rel="alternate" type="text/html" title="Widgets of 2020" /><published>2020-01-04T00:00:00+08:00</published><updated>2020-01-04T00:00:00+08:00</updated><id>http://localhost:4000/life/widgets-of-2020</id><content type="html" xml:base="http://localhost:4000/life/widgets-of-2020/">&lt;p&gt;2020年值得收录的一些资源，想法集中于此。&lt;/p&gt;

&lt;h3 id=&quot;费德勒-vs-德约科维奇-court-level-view-很好的视频资源&quot;&gt;费德勒 vs 德约科维奇 court level view 很好的视频资源&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;https://www.youtube.com/watch?v=nwI-MrUCtkk&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;一篇对javascript版本及标准的简短介绍文章&quot;&gt;一篇对Javascript版本及标准的简短介绍文章&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;https://benmccormick.org/2015/09/14/es5-es6-es2016-es-next-whats-going-on-with-javascript-versioning&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;babel-是一个能将新js功能用法句法编译为旧版本js的工具&quot;&gt;Babel 是一个能将新Js功能(用法/句法)编译为旧版本js的工具&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Babel is a toolchain that is mainly used to convert ECMAScript 2015+ code into a backwards compatible version of JavaScript in current and older browsers or environments.&lt;/li&gt;
  &lt;li&gt;https://babeljs.io/docs/en/&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;2ality-是-dr-axel-rauschmayer-的-blog很多关于js新功能以及语言基础层面的内容&quot;&gt;2ality 是 Dr. Axel Rauschmayer 的 blog，很多关于JS新功能以及语言基础层面的内容&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;https://2ality.com/&lt;/li&gt;
  &lt;li&gt;http://dr-axel.de/&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;tc39-意为-39号技术委员会-在-ecmascript-标准下对js进行标准化上面有很多js语言细节的定义与讨论&quot;&gt;TC39 意为 “39号技术委员会”， 在 “ECMAScript” 标准下对JS进行标准化。上面有很多JS语言细节的定义与讨论&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;https://ponyfoo.com/articles/tc39-ecmascript-proposals-future-of-javascript&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;一个免费下载英文电子书的网址&quot;&gt;一个免费下载英文电子书的网址&lt;/h3&gt;

&lt;p&gt;虽然不支持盗版，但有些英文书在亚马逊只有纸质版，无法买到。编程类的书籍看电子版更方便。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;https://archive.org/&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;从这个网站找到了《the little schemer》 和 《the seasoned schemer》。 搜索的时候选中 Search text contents&lt;/p&gt;

&lt;p&gt;https://archive.org/details/Schemer?q=the+little+schemer&lt;/p&gt;

&lt;h3 id=&quot;rectangle-窗口快捷控制软件&quot;&gt;Rectangle 窗口快捷控制软件&lt;/h3&gt;

&lt;p&gt;之前一直使用的 spectacle 停止维护，前者推荐使用 Rectangle 作为替代。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;https://github.com/rxhanson/Rectangle&lt;/li&gt;
  &lt;li&gt;https://github.com/eczarny/spectacle&lt;/li&gt;
  &lt;li&gt;https://rectangleapp.com/&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;保罗格雷汉姆的-ansi-common-lisp-资源&quot;&gt;保罗·格雷汉姆的 &lt;a href=&quot;https://www.amazon.com/gp/product/0133708756/ref=dbs_a_def_rwt_bibl_vppi_i1&quot;&gt;ANSI Common Lisp&lt;/a&gt; 资源&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;github 上的一个pdf资源
    &lt;ul&gt;
      &lt;li&gt;https://github.com/clojurians-org/lisp-ebook/blob/master/ANSI%20Common%20LISP.pdf&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;这个repo中还有其他关于Lisp的资源
    &lt;ul&gt;
      &lt;li&gt;https://github.com/clojurians-org/lisp-ebook&lt;/li&gt;
    &lt;/ul&gt;

    &lt;h3 id=&quot;ted-ed-上关于营养的几个短视频&quot;&gt;Ted Ed 上关于营养的几个短视频&lt;/h3&gt;

    &lt;ul&gt;
      &lt;li&gt;https://ed.ted.com/lessons/how-the-food-you-eat-affects-your-brain-mia-nacamulli#review&lt;/li&gt;
      &lt;li&gt;https://ed.ted.com/lessons/how-do-carbohydrates-impact-your-health-richard-j-wood#review&lt;/li&gt;
      &lt;li&gt;https://ed.ted.com/lessons/sugar-hiding-in-plain-sight-robert-lustig&lt;/li&gt;
      &lt;li&gt;https://ed.ted.com/lessons/how-sugar-affects-the-brain-nicole-avena&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;Ted Ed 是ted talk衍生出来的教育系列视频，时长较短，以动画加讲解形式为主，趣味性较强。&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;https://ed.ted.com/&lt;/li&gt;
    &lt;/ul&gt;

    &lt;h3 id=&quot;苹果mac上智能相册的分类功能&quot;&gt;苹果Mac上智能相册的分类功能&lt;/h3&gt;

    &lt;ul&gt;
      &lt;li&gt;可以以相机型号、光圈、感光度范围等进行照片查找和分类&lt;/li&gt;
      &lt;li&gt;https://www.macworld.com/article/3236056/icloud-photo-library-finding-a-way-to-sort-photos-by-the-device-they-were-created-with.html&lt;/li&gt;
    &lt;/ul&gt;

    &lt;h3 id=&quot;githut-查看gitbub上语言活跃程度的网站&quot;&gt;Githut, 查看gitbub上语言活跃程度的网站&lt;/h3&gt;

    &lt;blockquote&gt;
      &lt;p&gt;A SMALL PLACE TO DISCOVER LANGUAGES IN GITHUB&lt;/p&gt;
    &lt;/blockquote&gt;

    &lt;ul&gt;
      &lt;li&gt;https://githut.info/&lt;/li&gt;
    &lt;/ul&gt;

    &lt;h3 id=&quot;亚马逊上发现的mit系列丛书63本&quot;&gt;亚马逊上发现的MIT系列丛书63本&lt;/h3&gt;

    &lt;ul&gt;
      &lt;li&gt;MIT Press Essential Knowledge series (63 books)&lt;/li&gt;
      &lt;li&gt;学科跨度大，话题相对前沿&lt;/li&gt;
      &lt;li&gt;https://www.amazon.com/dp/B085DHWVXF?searchxofy=true&amp;amp;ref_=dbs_s_aps_series_rwt&lt;/li&gt;
    &lt;/ul&gt;

    &lt;h3 id=&quot;mozilla-上的-tutorial-页面&quot;&gt;Mozilla 上的 Tutorial 页面&lt;/h3&gt;

    &lt;ul&gt;
      &lt;li&gt;https://developer.mozilla.org/en-US/docs/Web/Tutorials&lt;/li&gt;
      &lt;li&gt;包含 web 开发相关的不同技术层级的教程，包括案例教程，书籍，文档，视频等。&lt;/li&gt;
    &lt;/ul&gt;

    &lt;h3 id=&quot;mozilla-上的-web-相关术语表&quot;&gt;Mozilla 上的 web 相关术语表&lt;/h3&gt;

    &lt;p&gt;可用于快速回顾或者查询术语定义。相对于大篇幅的文档或者教程，术语定义往往更加抽象，更注重概念层面的定义，在实际应用中，回顾概念的准确定义可以提醒自己某个工具设计的初衷，以及它与其他那些概念或工具形成互补关系，或者它是否是某一旧工具的升级或者抽象。&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;https://developer.mozilla.org/en-US/docs/Glossary&lt;/li&gt;
    &lt;/ul&gt;

    &lt;h3 id=&quot;javascriptingcom-一个查询js相关库框架和插件的网站&quot;&gt;javascripting.com 一个查询js相关库，框架和插件的网站&lt;/h3&gt;

    &lt;p&gt;同时显示某个库当前的流行程度，在学习相关技术前应该查询哪个框架或者库是当前最流行或广泛使用的，再花时间学习。&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;https://www.javascripting.com/&lt;/li&gt;
    &lt;/ul&gt;

    &lt;blockquote&gt;
      &lt;p&gt;The definitive source of the best
JavaScript libraries, frameworks, and plugins.&lt;/p&gt;
    &lt;/blockquote&gt;

    &lt;h3 id=&quot;modernizr-一个feature-detection工具可以测试用户端是否支持特定功能&quot;&gt;Modernizr 一个feature detection工具，可以测试用户端是否支持特定功能&lt;/h3&gt;

    &lt;ul&gt;
      &lt;li&gt;https://modernizr.com/&lt;/li&gt;
    &lt;/ul&gt;

    &lt;blockquote&gt;
      &lt;p&gt;Modernizr tells you what HTML, CSS and JavaScript features the user’s browser has to offer.&lt;/p&gt;
    &lt;/blockquote&gt;

    &lt;h3 id=&quot;drawio-之前用过的一个在线免费-flowchart-工具现在推出了desktop版&quot;&gt;draw.io 之前用过的一个在线免费 flowchart 工具，现在推出了desktop版&lt;/h3&gt;

    &lt;p&gt;Github主地址&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;https://github.com/jgraph&lt;/li&gt;
    &lt;/ul&gt;

    &lt;h3 id=&quot;google-developer-上介绍浏览器工作原理的系列文章&quot;&gt;Google Developer 上介绍浏览器工作原理的系列文章&lt;/h3&gt;

    &lt;ul&gt;
      &lt;li&gt;https://developers.google.com/web/updates/2018/09/inside-browser-part1&lt;/li&gt;
    &lt;/ul&gt;

    &lt;h3 id=&quot;一个介绍javascript中-module-design-pattern-的视频&quot;&gt;一个介绍javascript中 Module Design Pattern 的视频&lt;/h3&gt;

    &lt;p&gt;这里的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Module&lt;/code&gt; 指的不是某些语言中引入module的那个module, 指的是利用javascript中的scope规则和closure机制，使用function创造一个相对独立的scope来定义private states和behavior，同时避免与外层scope相互干扰，最后以return object 的方式(maybe with use of IIFE)暴露部分接口来access内部states或behavior.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures&lt;/li&gt;
      &lt;li&gt;https://www.youtube.com/watch?v=SKBmJ9P6OAk&lt;/li&gt;
    &lt;/ul&gt;

    &lt;h3 id=&quot;stackoverflow-上关于如何上手学习-nodejs-的答案&quot;&gt;stackoverflow 上关于如何上手学习 Node.js 的答案&lt;/h3&gt;

    &lt;p&gt;Node.js 为javascript 提供了除浏览器以外的更广阔的应用场景。&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;https://stackoverflow.com/questions/2353818/how-do-i-get-started-with-node-js/5511507#5511507&lt;/li&gt;
    &lt;/ul&gt;

    &lt;h3 id=&quot;mozilla-上一篇详细介绍javascript的object-model的文章&quot;&gt;Mozilla 上一篇详细介绍javascript的object model的文章&lt;/h3&gt;

    &lt;ul&gt;
      &lt;li&gt;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Details_of_the_Object_Model&lt;/li&gt;
    &lt;/ul&gt;

    &lt;h3 id=&quot;raster-image-位图-和-vector-image-向量图-的区别&quot;&gt;raster image 位图 和 vector image 向量图 的区别&lt;/h3&gt;

    &lt;ul&gt;
      &lt;li&gt;https://www.youtube.com/watch?v=-Fs2t6P5AjY&lt;/li&gt;
    &lt;/ul&gt;

    &lt;h3 id=&quot;一篇关于在-promise-和-asyncawait-之间取舍的文章&quot;&gt;一篇关于在 promise 和 async/await 之间取舍的文章&lt;/h3&gt;

    &lt;p&gt;主旨&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;async/await&lt;/code&gt;能更容易处理stacktrace而不用像promise chain 那样传递记录stacktrace，因此&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;async/await&lt;/code&gt;更加节约内存。作者推荐使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;async/await&lt;/code&gt;&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;Compared to using promises directly, not only can async and await make code more readable for developers — they enable some interesting optimizations in JavaScript engines, too!&lt;/p&gt;
    &lt;/blockquote&gt;

    &lt;ul&gt;
      &lt;li&gt;https://mathiasbynens.be/notes/async-stack-traces&lt;/li&gt;
    &lt;/ul&gt;

    &lt;h3 id=&quot;关于-javascript-中-promise-的implementation标准&quot;&gt;关于 JavaScript 中 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Promise&lt;/code&gt; 的implementation标准&lt;/h3&gt;

    &lt;p&gt;通常称作 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Promise/A+&lt;/code&gt;。 可以看到很多篇幅都用于&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;then&lt;/code&gt;的部分，其中的逻辑有点绕，需要慢慢看，慢慢想。&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;https://promisesaplus.com/&lt;/li&gt;
    &lt;/ul&gt;

    &lt;h3 id=&quot;一篇关于-promise-这个-constructor-中所包含的模式的文章--the-revealing-constructor-pattern&quot;&gt;一篇关于 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Promise&lt;/code&gt; 这个 Constructor 中所包含的模式的文章 – The Revealing Constructor Pattern&lt;/h3&gt;

    &lt;p&gt;首先这篇文章是在 &lt;a href=&quot;https://pouchdb.com/2015/05/18/we-have-a-problem-with-promises.html&quot;&gt;we have a problem with promise&lt;/a&gt; 中被提到的。&lt;/p&gt;

    &lt;p&gt;文章中提到 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Promise&lt;/code&gt; 的标准构造方式也就是用 Constructor:&lt;/p&gt;

    &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;promise&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;reject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// do something then resolve/reject&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Promise&lt;/code&gt; constructor 接收一个callback作为argument, 这个callkback function又接收两个arguments通常命名为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;resolve&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reject&lt;/code&gt;(也可以使用其他名称)。这两个 callback arguments 可以决定新构建的这个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Promise&lt;/code&gt; object的内部状态(state)，而一旦这个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Promise&lt;/code&gt; object的构造执行完成，我们就无法再使用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;resolve&lt;/code&gt;或者&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reject&lt;/code&gt;来篡改其状态，只能使用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;then&lt;/code&gt;来连接后续操作。&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;resolve and reject. These arguments have the capability to manipulate the internal state of the newly-constructed Promise instance p.&lt;/p&gt;
    &lt;/blockquote&gt;

    &lt;p&gt;作者称这个模式为 “The Revealing Constructor Pattern” 是因为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Promise&lt;/code&gt; constructor 揭示了其内部功能(capabilities), 但仅限于实例的构造过程。&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;I call this the revealing constructor pattern because the Promise constructor is revealing its internal capabilities, but only to the code that constructs the promise in question. The ability to resolve or reject the promise is only revealed to the constructing code, and is crucially not revealed to anyone using the promise.&lt;/p&gt;
    &lt;/blockquote&gt;

    &lt;p&gt;地址：&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;https://blog.domenic.me/the-revealing-constructor-pattern/&lt;/li&gt;
    &lt;/ul&gt;

    &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Ohoooo!&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;guess what&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;h3 id=&quot;google-上关于web开发的资源网站&quot;&gt;Google 上关于web开发的资源网站&lt;/h3&gt;

    &lt;ul&gt;
      &lt;li&gt;web fundamentals 部分包含大量web开发的基础以及进阶内容介绍， 文章专业性较强，但慢下来研读收获很多
        &lt;ul&gt;
          &lt;li&gt;https://developers.google.com/web/fundamentals&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Progressive Web Apps Training 教程，内容覆盖全，但正在改版中
        &lt;ul&gt;
          &lt;li&gt;https://developers.google.com/web/ilt/pwa&lt;/li&gt;
          &lt;li&gt;This course shows you how to convert web pages to PWAs. A PWA is not an API or a technology, but it is a web development approach that uses a combination of tools and technologies already available to create targeted, ideal user experiences. It shows how to use service workers, APIs, and an application shell architecture for meaningful offline experiences, fast first load, and easy user reengagement upon repeat visits.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;

    &lt;h3 id=&quot;event-event-listener-event-handler-的区别&quot;&gt;Event, Event Listener, Event Handler 的区别&lt;/h3&gt;

    &lt;ul&gt;
      &lt;li&gt;Event 比较好理解，直接指代某个事件&lt;/li&gt;
      &lt;li&gt;比较容易弄混的是 Event Handler, 准确的说指的是事件触发的那个 callback&lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Event Listener 有时和 Event Handler 互换，但是准确的说 Listener 包含事件监听的那部分，而 Handler 只是callback它不关心是什么事件触发了它。&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events&lt;/li&gt;
    &lt;/ul&gt;

    &lt;blockquote&gt;
      &lt;p&gt;Each available event has an event handler, which is a block of code (usually a JavaScript function that you as a programmer create) that runs when the event fires. When such a block of code is defined to run in response to an event, we say we are registering an event handler. Note: Event handlers are sometimes called event listeners — they are pretty much interchangeable for our purposes, although strictly speaking, they work together. The listener listens out for the event happening, and the handler is the code that is run in response to it happening.&lt;/p&gt;
    &lt;/blockquote&gt;

    &lt;h3 id=&quot;ted-上一个介绍咖啡因与酒精对睡眠影响的短视频&quot;&gt;Ted 上一个介绍咖啡因与酒精对睡眠影响的短视频&lt;/h3&gt;

    &lt;ul&gt;
      &lt;li&gt;https://www.ted.com/talks/matt_walker_how_caffeine_and_alcohol_affect_your_sleep#t-299995&lt;/li&gt;
      &lt;li&gt;摄入咖啡因要注意代谢周期&lt;/li&gt;
      &lt;li&gt;睡前饮酒看似助眠， 实际从至少3个方面破坏睡眠&lt;/li&gt;
    &lt;/ul&gt;

    &lt;h3 id=&quot;一个费德勒court-level视频集锦&quot;&gt;一个费德勒court level视频集锦&lt;/h3&gt;

    &lt;p&gt;https://www.youtube.com/watch?v=Ol2I9CxpZ3s&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name>Xullnn</name></author><category term="Life" /><category term="information" /><summary type="html">2020年值得收录的一些资源，想法集中于此。</summary></entry><entry><title type="html">Notes of designing with the mind in mind</title><link href="http://localhost:4000/work/notes-of-designing-with-the-mind-in-mind/" rel="alternate" type="text/html" title="Notes of designing with the mind in mind" /><published>2019-11-21T00:00:00+08:00</published><updated>2019-11-21T00:00:00+08:00</updated><id>http://localhost:4000/work/notes-of-designing-with-the-mind-in-mind</id><content type="html" xml:base="http://localhost:4000/work/notes-of-designing-with-the-mind-in-mind/">&lt;p&gt;一本糅合了认知科学，脑神经科学以及编程的关于设计的书。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;frontend as 人机交互 序，&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;工程学 x 设计学 x 科技 序，&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;如果你不知道为甚出现差异，做A-B测试的作用也会大打折扣 序，&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;说到底，用户界面设计准则是以人类心理学为基础的 引言3，&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;chapter-1&quot;&gt;Chapter 1&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;感知目的（你的期待）影响感知内容，并形成单向路径 2，
    &lt;ul&gt;
      &lt;li&gt;引导与过滤 9，11，&lt;/li&gt;
      &lt;li&gt;儿童更容易排除观察时的偏差 9，&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;心智框架与控件摆放一致 4，&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;注意瞬脱与页面事件间隔设计 5，&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;惯例与标准，一致性，理解用户到来的目标 11，12，&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;chapter-2&quot;&gt;Chapter 2&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;视觉格式塔原理 13，
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Gestalt_psychology&quot;&gt;As used in Gestalt psychology, the German word gestalt is interpreted as “pattern” or “configuration”.&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;格式塔原理中影响分组（类）感知的关系：接近，相似 15，16&lt;/li&gt;
  &lt;li&gt;格式塔原理中对自动脑补的描述：连续性，封闭性 17，18，19&lt;/li&gt;
  &lt;li&gt;格式塔原理中对对称化解析的描述 19，&lt;/li&gt;
  &lt;li&gt;格式塔原理中对同步运动元素被解析为同组或同类的描述 23，&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;chapter-3&quot;&gt;Chapter 3&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;结构化呈现信息容易被理解 27，
    &lt;ul&gt;
      &lt;li&gt;对长串数字分组 29，&lt;/li&gt;
      &lt;li&gt;苹果的例子 32，&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;chapter-4&quot;&gt;Chapter 4&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;视觉是为边缘反差而不是为亮度优化的 35，&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;色块如何更易区分 36，&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;影响色彩感知的外部因素 40，&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;色彩使用准则 40，&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;chapter-5&quot;&gt;Chapter 5&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;视觉中央区域占用更多大脑资源，边缘视觉只对运动物体敏感 43，&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;blind spot 4，&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;边缘视觉提供视觉线索 46，&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;低亮度条件下如果你不直接看物体（如流星）， 反而能看得更清楚 47，&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;让信息可见的常用方法 50，&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;弹窗应小心使用 51，
    &lt;ul&gt;
      &lt;li&gt;弹窗的模式级别（对当前操作的影响程度，从完全不影响到完全阻断所有操作） 51，&lt;/li&gt;
      &lt;li&gt;用户可能因厌烦禁用所有弹窗（可能只针对特定网站）。习惯化屏蔽 52，&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;使用提示声 53，&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;使用闪烁或抖动 53，&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;视觉跳入 55，&lt;/li&gt;
  &lt;li&gt;设计出与众不同的图标集非常困难 59，&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;chapter-6&quot;&gt;Chapter 6&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;大脑是为语言(speaking/speech)而不是为阅读(reading)而设计的 62，&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;阅读是需要训练的 62，&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;基于语境的阅读是对阅读能力不足的补偿 66，&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;初级和高级阅读者使用的大脑区域不同 68，&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;糟糕的信息设计 68，
    &lt;ul&gt;
      &lt;li&gt;不常见的词&lt;/li&gt;
      &lt;li&gt;不好的字体&lt;/li&gt;
      &lt;li&gt;信息被重复的内容淹没&lt;/li&gt;
      &lt;li&gt;居中对齐&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;如何支持用户的阅读 73，
    &lt;ul&gt;
      &lt;li&gt;避免前面提到的糟糕设计点&lt;/li&gt;
      &lt;li&gt;结构化信息呈现方式&lt;/li&gt;
      &lt;li&gt;不要给太多文字 74，&lt;/li&gt;
      &lt;li&gt;尽量减少用户阅读量&lt;/li&gt;
      &lt;li&gt;测试设计效果&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;chapter-7&quot;&gt;Chapter 7&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;睡眠与间隔学习 80，&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;去学习过程更多的是使记忆模糊化的过程 81，&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;长期记忆是工作记忆的潜在输入内容 81，
    &lt;ul&gt;
      &lt;li&gt;工作记忆是“此刻的记忆”，它整合了所有我们的感知形式和长期记忆 82，&lt;/li&gt;
      &lt;li&gt;工作记忆的定义 82，&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;对 记忆是什么 的类比定义 82，
&lt;img src=&quot;https://tva1.sinaimg.cn/large/006y8mN6gy1g95honuatoj31400u0hdu.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;注意力容易被什么事物吸引 84，
    &lt;ul&gt;
      &lt;li&gt;视觉边缘移动或朝向我们移动的物体&lt;/li&gt;
      &lt;li&gt;威胁，危险&lt;/li&gt;
      &lt;li&gt;人脸&lt;/li&gt;
      &lt;li&gt;性和食物&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;用户界面应该帮助用户从一个时刻到下一个时刻记住核心信息 87，&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;要么避免模式，要么提供强烈的反馈告知当前所在的模式 87，
    &lt;ul&gt;
      &lt;li&gt;如ps在相同界面选择不同模式时，同样的操作比如鼠标点击拖拽执行的操作是不同的&lt;/li&gt;
      &lt;li&gt;模式的缺点是一旦串台，操作就乱了，这也是为什么需要强烈反馈。想象你在踩油门之前忘了现在是前进挡还是后退挡的情景&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;提供搜索结果时应该用某种方式让用户能随时注意到最初的搜索关键词 88，&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;不同的话题或请求单独写在不同邮件里 89，&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;每个页面应该只有一个 Call to action 元素， 避免分心的元素 89，&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;指令或操作步骤需要保持随时可见，或至少当前步骤可见 90，&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;长期记忆是分布式存储的 90，&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;长期记忆的特点 91，
    &lt;ul&gt;
      &lt;li&gt;易产生错误
        &lt;ul&gt;
          &lt;li&gt;高压缩比&lt;/li&gt;
          &lt;li&gt;不同记忆以不同细节层次记录&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;受情绪影响&lt;/li&gt;
      &lt;li&gt;记忆可以改变&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;长期记忆特点对用户界面设计的影响 92，
    &lt;ul&gt;
      &lt;li&gt;设计者应该避免开发出给用户造成长期记忆负担的系统。比如对密码特征的过多要求，安全提示问题等&lt;/li&gt;
      &lt;li&gt;用户界面的一致性有助于学习和长期记忆&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;chapter-8&quot;&gt;Chapter 8&lt;/h4&gt;

&lt;p&gt;注意力对思考以及行动的限制–人的思考行为模式&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;1 我们专注于目标而很少注意到使用的工具 95，
    &lt;ul&gt;
      &lt;li&gt;工作记忆的特点决定&lt;/li&gt;
      &lt;li&gt;注意力转向工具就会丢失任务执行的细节
        &lt;ul&gt;
          &lt;li&gt;This is why mastery-based learning is important.&lt;/li&gt;
          &lt;li&gt;熟悉工具的重要性，熟悉程度越接近无意识状态，给予任务的关注就越多&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;《Don’t make me think》96，
        &lt;ul&gt;
          &lt;li&gt;网站本身应该隐入背景，而让用户专注于要完成的任务或达成的目标&lt;/li&gt;
          &lt;li&gt;“如果你让我思考怎么用你的软件或网站，而不是做我要做的事，那你就失去我这个用户了”&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;2 我们能注意到更多与目标相关的东西 96，
    &lt;ul&gt;
      &lt;li&gt;非注意盲视：大猩猩实验&lt;/li&gt;
      &lt;li&gt;变化盲视：指路时工人抬玻璃从两人中间穿过，求助者被替换但指路人并未注意到&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;3 我们使用外部帮助来记忆正在做的事 98，
    &lt;ul&gt;
      &lt;li&gt;做记录，标记，归类等&lt;/li&gt;
      &lt;li&gt;用户执行任务时应该标记处那些是完成的，提示当前进度，以及提供区分操作对象的辅助显示功能（如颜色，透明度）&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;4 我们跟着信息“气味”靠近目标 100，
    &lt;ul&gt;
      &lt;li&gt;注意力的目标导向倾向&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;5 我们偏好熟悉的路径 102，
    &lt;ul&gt;
      &lt;li&gt;探索新的路径就是解决问题，注意力和短期记忆就要承受巨大的压力 102，&lt;/li&gt;
      &lt;li&gt;不需要动脑子&lt;/li&gt;
      &lt;li&gt;为了节能&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;6 我们的思考周期：目标，执行，评估 103，
    &lt;ul&gt;
      &lt;li&gt;每一项大任务的子任务或子步骤也是这样的周期，类似recursion&lt;/li&gt;
      &lt;li&gt;对应到设计原则就是：
        &lt;ul&gt;
          &lt;li&gt;提供清晰的目标&lt;/li&gt;
          &lt;li&gt;提供清晰的操作指导而不是实现细节&lt;/li&gt;
          &lt;li&gt;提供完成情况的明确反馈&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;7 完成任务的主要目标后，我们常常忘记首尾 106，
    &lt;ul&gt;
      &lt;li&gt;注意力是十分稀缺的资源，容易瞬间滑落或松懈&lt;/li&gt;
      &lt;li&gt;设计中应该提示用户完成首尾工作或自动帮助用户完成首尾工作&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;chapter-9&quot;&gt;Chapter 9&lt;/h4&gt;

&lt;p&gt;长期记忆的两个功能， 识别和回忆&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;识别容易，回忆很难 110，&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;识别瞬间的神经模式激发，只要这个模式是之前被激发过的，识别随即产生。如果是陌生的事物，会激发新的神经模式，也就无法引起识别。当然还有处于中间状态的识别，比如类似的事物或部分熟悉的特征 111，&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;回忆是在没有感觉输入的情况下，长期记忆对神经模式的重新激活，所以更难 112，&lt;/li&gt;
  &lt;li&gt;人脑在进化中并没有进化出回忆事实的能力 112，&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;识别与回忆对用户界面设计的影响 113，&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;GUI 的设计基础
    &lt;ul&gt;
      &lt;li&gt;看到和选择比回忆和输入容易&lt;/li&gt;
      &lt;li&gt;尽可能用图像来表示功能&lt;/li&gt;
      &lt;li&gt;文字指令也有其自身优势&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;缩略图帮助识别和寻找对象&lt;/li&gt;
  &lt;li&gt;使用频率越高的功能，可见性应该越高&lt;/li&gt;
  &lt;li&gt;用视觉提示让用户意识到当前所处的位置或步骤&lt;/li&gt;
  &lt;li&gt;让认证信息容易回忆
    &lt;ul&gt;
      &lt;li&gt;让用户可以自定义密码找回问题等&lt;/li&gt;
      &lt;li&gt;在保证信息安全的前提下考虑使用生物识别&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;chapter-10&quot;&gt;Chapter 10&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;系统二很少占主导地位，系统一（无意识的，习惯的，情绪化思维）比系统二的运行速度快10到100倍 120，&lt;/li&gt;
  &lt;li&gt;系统一容易被误导
    &lt;ul&gt;
      &lt;li&gt;用简化的问题替代需要思考的问题&lt;/li&gt;
      &lt;li&gt;倾向于认为没有感知到的就不存在&lt;/li&gt;
      &lt;li&gt;基于目标和经验过滤（损失）信息&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;系统二比较懒&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;什么情况下需要系统二介入 121，
    &lt;ul&gt;
      &lt;li&gt;我们的目标是把事情做得绝对正确而不是大概正确&lt;/li&gt;
      &lt;li&gt;系统一无法自动识别对象的时候&lt;/li&gt;
      &lt;li&gt;系统一给出多个矛盾的解决方式的时候&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;归纳法的缺点也是他的优点 123，&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;从经验中学习并不一定 要大脑皮层的参与， 旧脑和中脑就可以从经验中学习&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;训练，训练，还是训练 124，&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;现实中的大部分任务由无意识的和受控的两部分组合而成 125，&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;大脑皮层对应的功能 126，
    &lt;ul&gt;
      &lt;li&gt;推理和分析即时情况&lt;/li&gt;
      &lt;li&gt;计划或者寻找策略和步骤去应对这些情况&lt;/li&gt;
      &lt;li&gt;执行策略和步骤并且监控进展&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;用计算机术语表达就是：大脑皮层给了我们为自己即时创造程序的能力 126，&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;人脑不可能是为计算而优化的 127，&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;否定句式会创造更多的信息块（造成更大的记忆负担）128，&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;一些问题和计算需要平常人所没有的训练 129，&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;电脑和计算器在计算和问题求解上，至少在定义清晰的问题上，比我们擅长得多 130，&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;交互系统应该减少用户在操作上消耗的注意力，避免把稀缺的认知资源从主要任务中抽离 131，
    &lt;ul&gt;
      &lt;li&gt;显著标示系统和任务状态，以便用户能一直轻松地查看到他们的状态&lt;/li&gt;
      &lt;li&gt;引导用户完成目标，聚焦&lt;/li&gt;
      &lt;li&gt;提示信息应该明确简洁&lt;/li&gt;
      &lt;li&gt;不要让用户诊断系统问题&lt;/li&gt;
      &lt;li&gt;尽量减少设置的数量和复杂度，比如各种组合参数&lt;/li&gt;
      &lt;li&gt;让系统令人感到熟悉
        &lt;ul&gt;
          &lt;li&gt;遵循业界标准或惯例，convention&lt;/li&gt;
          &lt;li&gt;改版操作需谨慎&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;计算工作交给电脑&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;chapter-11&quot;&gt;Chapter 11&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;当实践经常，有规律和精确时，我们学得更快 136，&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;实践的精度越高，学得越快 137，
    &lt;ul&gt;
      &lt;li&gt;未经组织的神经元会发出噪声&lt;/li&gt;
      &lt;li&gt;不精确的实践强化不精确，因为控制它的神经网络仍充满噪音&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;软件设计的三步 138,
    &lt;ul&gt;
      &lt;li&gt;任务分析 task, user story&lt;/li&gt;
      &lt;li&gt;概念模型（对象/操作分析） Model, Controller&lt;/li&gt;
      &lt;li&gt;实现 View, implementation&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;当操作任务聚焦，简单，一致时，我们学得更快 137，&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;将任务转化为工具所能提高的操作 137，&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;执行的鸿沟 138，&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;系统不同功能操作越可预期，一致性就越高 141，&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;一致性的两个层级 141，
    &lt;ul&gt;
      &lt;li&gt;概念层：由对象，操作，和概念模型属性之间的映射决定&lt;/li&gt;
      &lt;li&gt;按键层（具体操作）&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;不论惯例和约定是如何被封装起来的，目标都是在概念和任务层面上创新而在按键层面上坚持惯例 143，&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;当词汇专注于任务，且词汇熟悉和一致时，我们学得更快 144，
    &lt;ul&gt;
      &lt;li&gt;说用户能听懂的话&lt;/li&gt;
      &lt;li&gt;词汇使用要有一致性 147，
        &lt;ul&gt;
          &lt;li&gt;反例： ps中对 Fuzziness 和 Tolerance 的同时使用 148，&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;编写产品词典来规定用户所能接触到的每个对象，动作和属性 150，&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;（尝试）风险低的时候我们学得更快 150，
    &lt;ul&gt;
      &lt;li&gt;用户修正错误的（时间和操作等）成本低&lt;/li&gt;
      &lt;li&gt;鼓励用户探索&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;chapter-12&quot;&gt;Chapter 12&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;损失厌恶 154，&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;措辞（数字和语言的使用）影响我们的选择 155，&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;生动的想象和记忆影响我们的选择 156，&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;实际上，支持复杂决策的软件十分重要 159，&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;说服和引导： 诱导系统一，绕开系统二 164，&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;专业人士跳过统计数据，用强烈的故事来设计宣传，从而唤起恐惧，希望，满足，享受，性，金钱，民声，食物和更多的恐惧 164，&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;chapter-13&quot;&gt;Chapter 13&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;菲茨定律：在屏幕上，目标越大，且越靠近起始位置，你就能越快地指向（定位、点击）它 167，&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;粗调与精调 170，&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;图标增大的边际效应递减 171，&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;如何应用菲茨定律 171，
    &lt;ul&gt;
      &lt;li&gt;目标要足够大&lt;/li&gt;
      &lt;li&gt;实际可点区域要和对象可见区域同样大&lt;/li&gt;
      &lt;li&gt;扩大选中操作的可点区域&lt;/li&gt;
      &lt;li&gt;点击对象之间留出足够空间&lt;/li&gt;
      &lt;li&gt;重要目标放在屏幕边缘更易于定位&lt;/li&gt;
      &lt;li&gt;尽量使用弹出菜单&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;右键层级菜单的单个选项应该足够宽 174，&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;chapter-14&quot;&gt;Chapter 14&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;相应时间是影响用户满意度的最重要因素，没有之一 177，&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;高响应度的系统即使无法立刻完成用户请求，也能让用户了解情况（及时反馈） 178，&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;糟糕响应度的例子 178，
    &lt;ul&gt;
      &lt;li&gt;进行点击等操作后的反应迟缓&lt;/li&gt;
      &lt;li&gt;某项操作耗时长，会中断其他任务，还不能取消&lt;/li&gt;
      &lt;li&gt;长耗时的任务不提示总时长或剩余时长&lt;/li&gt;
      &lt;li&gt;断断续续难以理解的动画效果&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;人脑中的时间常量 179，&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;以数量级差异来考量时间 184，&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;人机交互的时间底线列表 186，&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;如果一个系统有延迟，应该把延迟放在单个任务之间，而不是之内 191，&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;先显示重要的东西 191，
    &lt;ul&gt;
      &lt;li&gt;多页文档打开时迅速显示第一页，然后再加载后面的页面&lt;/li&gt;
      &lt;li&gt;显示图片时如果速度较慢首先显示低分辨率的压缩版，不要逐行缓慢加载清晰图片 192，&lt;/li&gt;
      &lt;li&gt;提前处理请求或可能的请求 193，&lt;/li&gt;
      &lt;li&gt;在用户有频繁操作的时候考虑任务优先级，那些当前或队列中的任务可以搁置或中断 193，&lt;/li&gt;
      &lt;li&gt;必要时降低质量来保障时间
        &lt;ul&gt;
          &lt;li&gt;比如看视频卡顿就切换到低分辨率&lt;/li&gt;
          &lt;li&gt;建模软件在缩放或移动旋转模型时将模型显示为大的无细节方块&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;网页设计中如何提高响应度 195，
    &lt;ul&gt;
      &lt;li&gt;减少图片数量或大小&lt;/li&gt;
      &lt;li&gt;优先显示概览，只在需要时显示细节&lt;/li&gt;
      &lt;li&gt;下载代码到用户本地，以减少流量消耗&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;高响应度不是单方面提高硬件性能就可以实现的，这涉及到设计问题&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;后记-197&quot;&gt;后记 197，&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;技术发展很快&lt;/li&gt;
  &lt;li&gt;但人类如何感知，学习，和思考的基本知识变化不快&lt;/li&gt;
  &lt;li&gt;人类对自身的认识在不断提高&lt;/li&gt;
  &lt;li&gt;本书内容可能很快就过时了&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;著名的用户界面设计准则-199&quot;&gt;著名的用户界面设计准则 199&lt;/h4&gt;</content><author><name>Xullnn</name></author><category term="Work" /><category term="reading notes" /><category term="programming" /><summary type="html">一本糅合了认知科学，脑神经科学以及编程的关于设计的书。</summary></entry><entry><title type="html">Widgets of 2019</title><link href="http://localhost:4000/work/life/widgets-of-2019/" rel="alternate" type="text/html" title="Widgets of 2019" /><published>2019-11-20T00:00:00+08:00</published><updated>2019-11-20T00:00:00+08:00</updated><id>http://localhost:4000/work/life/widgets-of-2019</id><content type="html" xml:base="http://localhost:4000/work/life/widgets-of-2019/">&lt;p&gt;2019年值得收录的一些资源，想法集中于此。&lt;/p&gt;

&lt;h4 id=&quot;顶级公司的设计指导原则及资源&quot;&gt;顶级公司的设计指导原则及资源&lt;/h4&gt;

&lt;p&gt;关于开发者，设计者，或者不需要区分&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;apple: https://developer.apple.com/
    &lt;ul&gt;
      &lt;li&gt;一个关于好的开发者习惯的演讲: https://developer.apple.com/videos/play/wwdc2019/239/&lt;/li&gt;
      &lt;li&gt;苹果设计视频资源: https://developer.apple.com/videos/design/&lt;/li&gt;
      &lt;li&gt;开发者设计资源: https://developer.apple.com/design/resources/&lt;/li&gt;
      &lt;li&gt;每个页面可以细分出更多内容，可以仔细挖掘&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;microsoft: https://www.microsoft.com/design/inclusive/&lt;/li&gt;
  &lt;li&gt;一个设计原则汇总网站: https://www.designprinciplesftw.com/&lt;/li&gt;
  &lt;li&gt;mozilla 的一般设计原则 General design Principles: https://developer.mozilla.org/en-US/docs/Archive/Apps/Design/Planning/General_design_principles&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;一个数学老师的blog&quot;&gt;一个数学老师的blog&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;网页设计不错&lt;/li&gt;
  &lt;li&gt;视频讲解风格类似 khan&lt;/li&gt;
  &lt;li&gt;https://www.kristakingmath.com/blog&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;文件格式转换工具-pandoc&quot;&gt;文件格式转换工具 pandoc&lt;/h4&gt;

&lt;p&gt;https://pandoc.org/index.html&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;可以从markdown 转换至各种文档格式 比如 html docx 并保留格式和图片&lt;/li&gt;
  &lt;li&gt;如果想转为pdf 需要另外装 mactex&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;If you want to create a PDF, you’ll need to have LaTeX installed. (See MacTeX on OS X, MiKTeX on Windows, or install the texlive package in linux.) Then do&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pandoc test1.md -s -o test1.pdf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;https://tug.org/mactex/&lt;/p&gt;

&lt;h4 id=&quot;纽约大都会博物馆-the-metropolitan-museum-of-art&quot;&gt;纽约大都会博物馆 The Metropolitan Museum of Art&lt;/h4&gt;

&lt;p&gt;https://www.metmuseum.org/&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;audio guide of The Met Fifth Avenue
    &lt;ul&gt;
      &lt;li&gt;https://www.metmuseum.org/visit/audio-guide/the-met-fifth-avenue&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;academy-originals&quot;&gt;Academy Originals&lt;/h4&gt;

&lt;p&gt;Youtube 上一个关于创意产业的系列视频频道&lt;/p&gt;

&lt;p&gt;https://www.youtube.com/channel/UCzuwS1ll2HuQ1wV-tqf43KQ&lt;/p&gt;

&lt;p&gt;https://www.youtube.com/playlist?list=PLsruNZel-SDQj6OIG7M8uFzSGX6SMa3iS&lt;/p&gt;

&lt;h4 id=&quot;一个很好图标网站&quot;&gt;一个很好图标网站&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;https://icons8.com/icons&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;一个酒店预订网站&quot;&gt;一个酒店预订网站&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;booking.com&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Xullnn</name></author><category term="Work" /><category term="Life" /><category term="information" /><summary type="html">2019年值得收录的一些资源，想法集中于此。</summary></entry><entry><title type="html">Jottings about tennis</title><link href="http://localhost:4000/life/jottings-about-tennis/" rel="alternate" type="text/html" title="Jottings about tennis" /><published>2019-09-17T00:00:00+08:00</published><updated>2019-09-17T00:00:00+08:00</updated><id>http://localhost:4000/life/jottings-about-tennis</id><content type="html" xml:base="http://localhost:4000/life/jottings-about-tennis/">&lt;p&gt;不定时记录关于网球的一些思考。&lt;/p&gt;

&lt;p&gt;2017.07.25&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;时刻保持脚步移动了吗？&lt;/li&gt;
  &lt;li&gt;主要注意力是否在球上面？&lt;/li&gt;
  &lt;li&gt;左手随着转体护拍了吗？&lt;/li&gt;
  &lt;li&gt;头部足够固定吗？&lt;/li&gt;
  &lt;li&gt;重心适当下降并随着球的轨迹起伏吗？&lt;/li&gt;
  &lt;li&gt;是否只是放松地让球拍经过正确的击球点？&lt;/li&gt;
  &lt;li&gt;是否让出了足够的击球空间？&lt;/li&gt;
  &lt;li&gt;击球时机真的到了吗？球足够近了吗？&lt;/li&gt;
  &lt;li&gt;发球抛球点足够右前方吗，挥拍轨迹是 7点 ——11点 吗？&lt;/li&gt;
  &lt;li&gt;球拍与前臂角度足够垂直吗？&lt;/li&gt;
  &lt;li&gt;击球时，站定。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;＊ 让出足够甚至多余的击球空间始终是好的。当球过远时，可以选择迎前击球，这对击球来说是好事。但球哪怕过于靠近身体一点点，带来的只有动作的变形，这种情况下迎前完全不可能，最多能横向平移。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;2019.09.17&lt;/p&gt;

&lt;p&gt;1 充足的体能和必要的力量是最重要因素。体能不仅关乎身体运动层面的持久力，也直接影响专注度，头脑清晰度，反应速度等精神状态。力量方面最重要的是腿部力量。&lt;/p&gt;

&lt;p&gt;2 关于击球动作，以往太注重具体动作细节的调整，而最近一个比较深刻的体会是：挥拍时不要想着去击打球， 而是像没有球挥空拍一样，球拍只是在击球点“遇到”球。这种感觉不好把握，首先是要放弃去击打球的确定感，但身体又不能松散，情绪上要做到自信而放松。一旦某一拍没打准，后面就容易开始紧。 但是用这种方式击打出来的球会有明显的旋转和速度的提升，某些瞬间会有专业球员挥拍的感觉闪现。可以类比于斯诺克击球中把球击穿的感觉。&lt;/p&gt;

&lt;p&gt;3 当挥拍速度上去以后，一个经常出现的情况是击球点过于靠前。两种情况能发生：一，没有把球让进来就开始挥拍；二，脚步没到，也就是位置没到。&lt;/p&gt;

&lt;p&gt;4 把肘部抬起来可以避免动作只在横向上移动，球拍和前臂保持接近垂直角度感觉上挥速会降，而实际上这样会减轻腕部压力，配合前面提到的无球挥拍的感觉，拍速也会更高。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;2019.12.16&lt;/p&gt;

&lt;p&gt;之前从来没深究过为什么挥拍向前时的动作可以想象为”用球拍底盖瞄向来球”，只把它当做一种挥拍时的辅助想象。最近想到一点，球拍底盖不是一个独立的点，它是球拍中轴上的点，同样在这条轴上的点还有球拍的甜点，而且是”最甜”的点。当来球达到击球位置之前，用拍底挥向球的飞行轨迹，实际是在尽量保证击球点在球拍中轴线上，而挥拍的时机决定了击球点在拍面上的位置是靠近拍头还是减震器，这样击球的调整就少了一个维度，不用担心球在拍面左右方向上的位置。当挥拍速度足够快的时候，从拍底瞄球到触球瞬间只有极短的时间，几乎可以视作同一瞬间，击球的稳定性也由此提高。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;2020.01.22&lt;/p&gt;

&lt;p&gt;对手球速较快时，“拍底盖瞄球”的方法不容易找准节奏，而且常会导致引拍时不自然的翻腕，触球时有过早收拍、前送不够的情况。一种较为实用的击球感觉是尽量降低重心，观想用整个手掌连同握把瞄向球中下部前引，这样击球节奏更容易找到，容错空间更大，也不容易出现过早收拍的情况。&lt;/p&gt;</content><author><name>Xullnn</name></author><category term="Life" /><category term="tennis" /><category term="fun" /><category term="sport" /><category term="health" /><summary type="html">不定时记录关于网球的一些思考。</summary></entry><entry><title type="html">why fundamentals are important?</title><link href="http://localhost:4000/work/why-learning-fundamentals/" rel="alternate" type="text/html" title="why fundamentals are important?" /><published>2019-09-12T00:00:00+08:00</published><updated>2019-09-12T00:00:00+08:00</updated><id>http://localhost:4000/work/why-learning-fundamentals</id><content type="html" xml:base="http://localhost:4000/work/why-learning-fundamentals/">&lt;p&gt;为什么掌握(master)基础知识很重要。&lt;/p&gt;

&lt;p&gt;Modern society addresses the ability of rapid learning a lot. To meet the word ‘rapid’, many learning projects emerge on market. They usually start with words like “n months”, “n weeks”, or end with “in just n weeks”, “in just n months”. And the marketing effect declines as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;n&lt;/code&gt; increases. People are inspired by encouraging ads, picturing a brighter future that will come soon just after a bearable period of time. After all, all these projects present you with so many successful cases, so you think you are going to endeavor to learn this, then you can be one of those successful cases. But actually, you are fooled by survivorship bias. All those successful cases are advertised widely. All the failed cases just leave quietly, because no one likes to broadcast their failure, so they just want to keep it down.&lt;/p&gt;

&lt;p&gt;What about the opposite way – the slow way? Slow minus rapid equals a lot extra time. Where should we put this part of time in. My answer is investing a lot of time into fundamentals. In this post I want to combine my learning experience at a place which address &lt;a href=&quot;https://launchschool.com&quot;&gt;The Slow Path to Proficiency&lt;/a&gt; with knowledge I gained from other place to share my thoughts about the importance of learning fundamentals – especially for a newcomer in a filed.&lt;/p&gt;

&lt;h2 id=&quot;1-just-needs-to-see-one-motion-to-realize-the-chasm&quot;&gt;1 Just needs to see one motion to realize the chasm&lt;/h2&gt;

&lt;p&gt;In the fall of 2015, I had the fortune to watch a tennis game of &lt;a href=&quot;https://en.wikipedia.org/wiki/Roger_Federer&quot;&gt;Roger Federer&lt;/a&gt; in Shanghai, along with many other world-class professional players. What impressed me most was how clean, smooth and effortless their motions were. Tennis is my favorite sport and I played a lot when I was in school. Although I wanted to play better and make progress through much practice, there were days I played for more than 6 hours , but actually most of my practice was casual and arbitrary.&lt;/p&gt;

&lt;p&gt;At the moment I saw Roger’s swing. There’s only a “WOW” in my head. It’s like dancing, there’s not even a tiny redundant motion, and he swung as if he didn’t want to ‘hit’ the ball – he just swung, then the racket ‘met’ the ball just at the right moment and right position. This is an art of deep simplicity. In fact this feeling can be perceived on some professional junior players too, such as those in &lt;a href=&quot;https://www.itftennis.com/juniors/rankings/player-rankings.aspx&quot;&gt;U 18&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://image-for-articles.s3-ap-southeast-1.amazonaws.com/image-bucket-1/roger.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;What they have in common is they all undergo years of systematic training instructed by professionals, and yes this needs much time and money investment. And most of their daily schedules are filled by fundamental practice. With this realization, I know why I had little progress even I put a lot time and effort playing, and this is a very common phenomenon among amateurs. They play a lot, but never do fundamental practice systematically, the consequence is at a certain point their level just stuck at a plateau, forever. They want to progress but they just don’t like practicing fundamentals, because it’s not as fun as playing games with friends.&lt;/p&gt;

&lt;h2 id=&quot;2-see-the-big-picture&quot;&gt;2 See the big picture&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Isn’t progressivism good?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In the past several months, I’ve been following a series of lectures about the developing process of human culture by &lt;a href=&quot;https://baike.baidu.com/item/%E7%8E%8B%E4%B8%9C%E5%B2%B3/64673&quot;&gt;Wang Dong Yue&lt;/a&gt;. An interesting phenomenon he introduces is that many great thinkers in history didn’t advocate progressivism. In other words, they didn’t think advances of science, of economy, of technology etc. were all good things for humans. Such as &lt;a href=&quot;https://en.wikipedia.org/wiki/Laozi&quot;&gt;Laozi&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/Gautama_Buddha&quot;&gt;Gautama Buddha&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;He generalizes human culture(so far) as four stages: pre-theological stage, theological stage, agricultural stage, industrial and commercial stage. Most developed countries today are at the industrial and commercial stage. And there will have new culture in the future. The opposing of society advances sounds antisocial today, why there are people having such opinion? How can you think of advances of productivity and science as not good?&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Most modern technologies are deferred punishment.&lt;/p&gt;

  &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;                                                -- Nassim Nicholas Taleb
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Big tree vs. little tree&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I am not bringing this topic to discuss whether or not I agree with one of these opinions. I want to introduce you to how they gained this perspective. To simply put, the main reason is they lived at the early stage in human history. During that time, it was easier to &lt;em&gt;see the big picture&lt;/em&gt; than we do today. If we think of modern civilization as a luxuriant big tree, then at the time they lived, human civilization was only a small seedling.&lt;/p&gt;

&lt;p&gt;When we look at a seedling, it’s easy to observe the whole tree and we might gain a wisdom to discover some future tendency of the tree, no matter good or bad. But if we live on a perch of a high branch in our whole life, it’s hard to tell where the the tree’s torso is growing towards. Just as in today, nobody can predict what the world would be like 20 years later.&lt;/p&gt;

&lt;p&gt;This tree metaphor can be applied to many other things. One example is there were just a few subjects at the early stage of human history, such as theology, philosophy, math. But today we have more than thousands of subjects there and the number keeps growing. And it seems every tiny branch can take one’s lifelong time to learn. Therefore, how and where to invest time becomes important.&lt;/p&gt;

&lt;p&gt;However, time doesn’t flow backwards, big trees don’t grow back to seedlings. Is it still realistic to see the big picture for today’s people? The key here is the measure. If you want to have the whole tree, it’s unrealistic. But if you want to have “a little tree of the big tree”, it’s possible. What is “a little tree of the big tree”? We know that the process of a tree’s branching is self-similar. That means the shapes of a tree under different scales look similar. “a little tree of the big tree” means part of the big tree at a relatively small scale. If you have a “complete branch” of a tree, then it looks just like the big tree from a macro perspective, then every time we gain a perspective of seeing a little tree, we gain a little wisdom about the big picture. We don’t expect ourselves to become a great thinker, but at least we can expect ourselves to become a better thinker. So this way of gaining wisdom is feasible.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://image-for-articles.s3-ap-southeast-1.amazonaws.com/image-bucket-1/tree_1.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;3-new-things-derive-from-fundamental-things-not-from-the-newest-things&quot;&gt;3 New things derive from fundamental things, not from the newest things.&lt;/h2&gt;

&lt;p&gt;Here’s another tree example – evolution tree. From single-celled life to multicellular life to arthropods and mollusk to fish to amphibians to reptiles to mammals …, more and more advanced creatures derive(evolve) from simpler life forms. The more advanced the more complex the creature, and creatures at the top of the evolution tree are considered more free and adaptable, like tiger and human. However there is an obvious trend that the more advanced a creature is, the quicker it becomes extinct.&lt;/p&gt;

&lt;p&gt;You can find several types of single-celled life forms exist for more than 3 billion years, but you cannot find a single type of mammal exists for 500 million years. Successful creature as dinosaurs were only on Earth for about 12 million years.&lt;/p&gt;

&lt;p&gt;Another obvious thing is new life forms don’t normally derive from advanced ones, they derive from more fundamental(simple) life forms. For example fish, there are numerous types of fishes, from a tiny fish to a big whale. However the diversion between fish and amphibian didn’t happen on advanced fish types, it happened on low level fish types, then there could have the possibility to develop more advanced terrestrial animals such as reptiles and mammals.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://image-for-articles.s3-ap-southeast-1.amazonaws.com/image-bucket-1/evolutiontree.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If we examine the development of computer and software, what keep unchanging are the underlying &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt;s and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt;s, what are transitory are most fancy apps. A low level language can develop a high level language, and a high level language can develop a framework, and a highly specialized framework has little possibility to form new techniques. So in this respect mastering a language is better than jumping directly into frameworks.&lt;/p&gt;

&lt;h2 id=&quot;4-lindy-effect&quot;&gt;4 Lindy effect&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;The &lt;a href=&quot;https://en.wikipedia.org/wiki/Lindy_effect&quot;&gt;Lindy effect&lt;/a&gt; is a theory that the future life expectancy of some non-perishable things like a technology or an idea is proportional to their current age, so that every additional period of survival implies a longer remaining life expectancy.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This effect manifests on many things in our daily life. For example, &lt;a href=&quot;https://en.wikipedia.org/wiki/Chair&quot;&gt;chair&lt;/a&gt;, if chair has existed for more than 5000 years, then it’s likely that chair will continue existing within the next 5000 years. But don’t fall into a logic fallacy here, it doesn’t mean once a thing exists for 1 day, it would exist forever. We must &lt;em&gt;gauge both the age and “health” of the thing to determine continued survival&lt;/em&gt;. If a thing, more precisely a concept is robust and useful, then it tends to continue existing for as long as its history. Although there may have thousands of variants of chair, but the fundamentally conceptual “chair” never changes.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://image-for-articles.s3-ap-southeast-1.amazonaws.com/image-bucket-1/Dining-Chairs-Many-Design-for-Optional.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Apply this effect to programming, I don’t mean that all frameworks won’t last long, but it does need time to test their robustness. So if one likes chasing after every newly developed framework, it is not only exhausting, but also risky.&lt;/p&gt;

&lt;h2 id=&quot;5-fundamentals&quot;&gt;5 Fundamentals&lt;/h2&gt;

&lt;h4 id=&quot;fundamentals-are-layered&quot;&gt;fundamentals are layered&lt;/h4&gt;

&lt;p&gt;Let’s recall the tree metaphor mentioned before. Say there is a tree called &lt;em&gt;programming&lt;/em&gt; and you want to have(learn) it. Then you do some research on the internet, then you find most information telling you learning a framework like Rails or Angular is the most effective way to learning programming. But there are a few people advocate another notion called &lt;a href=&quot;https://en.wikipedia.org/wiki/Mastery_learning&quot;&gt;mastery-based learning&lt;/a&gt; which seems completely opposite to the framework one. This mastery-based learning approach addresses a lot about mastering fundamentals, and the chain of its reasoning sounds solid. After a long contemplation, you mumble in you mind: “I think I’ve never been such a guy who could master something complicated in just a few months, at least this never happened in my past”. So you decide give the mastery-based thing a try, focus on fundamentals first! &lt;em&gt;But what are the fundamentals of programming?&lt;/em&gt; Math? Eh..It should be, but not exactly. Computer Science? This seems closer than Math. Maybe, then you get confused soon.&lt;/p&gt;

&lt;p&gt;After another round of frantic searching, you seek out the different layers building up to various softwares and applications.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;softwares / applications&lt;/li&gt;
  &lt;li&gt;hight level languages &amp;amp; operating system&lt;/li&gt;
  &lt;li&gt;virtual machine&lt;/li&gt;
  &lt;li&gt;assembly language&lt;/li&gt;
  &lt;li&gt;machine language&lt;/li&gt;
  &lt;li&gt;hardware platform&lt;/li&gt;
  &lt;li&gt;chips and logic gates&lt;/li&gt;
  &lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Every layer lies as the foundation of next layer above. What about layers lower than chips and logic gates? That’s something about physics, no way, that is too much! The tree is too big.&lt;/p&gt;

&lt;p&gt;We can solve this by focusing on “a little tree of the big tree”. By doing this, we can at least hold a small but complete part of the whole tree. If we follow the layers listed above, “a little tree” refers to each single layer.&lt;/p&gt;

&lt;p&gt;But notice, there isn’t another layer lies upon the top layer “softwares / applications”. So it is not actually the foundation of any higher level technique. Therefore it should not be considered as one of these fundamentals, at least in the early stage of your study.&lt;/p&gt;

&lt;h4 id=&quot;fundamental-from-different-perspectives&quot;&gt;“fundamental” from different perspectives&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Definition from Merriam-Webster’s Advanced Learner’s Dictionary&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;one of the basic and important parts of something.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That’s too abstract.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;From tennis’ perspective:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Fundamentals in tennis include many basic movements for each motion(like serve, forehand, backhand etc.), physical fitness, mental robustness. The finally wanted result is you can perform a hit without thinking about you posture, and avoid being disturbed by emotion. &lt;em&gt;This means you need muscle memory for all the movements and a steady physical and mental state.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;As you slowly master these fundamentals, you also set a high baseline of you skill. That means you will have a steady performance beyond a certain level. This will distinguish you from other amateurs.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;From the tree metaphor’s perspective:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As with the tree metaphor, I’d prefer to define fundamentals as &lt;em&gt;the parts between every two consecutive branching points&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;If we harvest this part from any place on a tree, we harvest all the branches at and above this part. But what I actually want to say is: mastering fundamentals of a certain level, you gain all the potentialities to master all the layers above this layer.&lt;/p&gt;

&lt;p&gt;And it’s also not the case that the lower the better, because the lower you are at, the farther you are away from practice. Lower layers have to be more stable and unchangeable to serve as solid foundations for higher layers, and normally they can’t be put into place with their simple form. So for a beginner, focus on a layer that is a few(maybe one or two) layers lower than the highest layer is an appropriate choice.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;From evolution’s perspective:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you want to gain knowledge which has the potential of evolving to new knowledge, learning fundamentals is a good choice. This means focus on things that are not so advanced, focus on &lt;em&gt;things that have basic but stable features&lt;/em&gt;. Focusing on advanced things at the early stage of learning will fix your path of development, then you lose a lot of possibilities.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;From lindy-effect’s perspective:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Basic and robust concepts&lt;/em&gt; always stand in the long run. Once you know conceptual chair, you can recognize and make any type of chair. Learning basic concepts is an effective way to make your knowledge reusable and extendable.&lt;/p&gt;

&lt;h2 id=&quot;6-finding-fundamentals&quot;&gt;6 Finding fundamentals&lt;/h2&gt;

&lt;p&gt;Once we are convinced to focus on fundamentals, there is still a big missing part of the puzzle – as a beginner, how do we know which are the fundamental concepts or knowledge to a specific layer? The simple answer is we don’t know. That’s where we need professionals – people who can see the &lt;em&gt;big picture&lt;/em&gt;. But this topic is not covered in this post. Before finding professional instructions, we first need to firm our belief in learning fundamentals, because that won’t be a happy-and-easy process.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;The tree metaphor is actually an over-simplified model of knowledge. But to a large extent it reflects the process of the development of human culture and knowledge, as well as the process of mastering a new skill. Fundamentals present in many layers, we should choose one layer to focus on at the early stage of learning. Fundamental things tend to exist longer, so investing a relatively large portion of time in this part is both necessary and beneficial, especially from a long-term perspective. Technologies change so rapidly today, if we are unable to hold something that is unchanging and stable on the long run, we can’t stand too long.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;fundamentals are the foundation of deep simplicity.&lt;/li&gt;
  &lt;li&gt;learning fundamentals helps us gain wisdom to see the big picture.&lt;/li&gt;
  &lt;li&gt;learning fundamentals makes our time investing more valuable from a long-term perspective&lt;/li&gt;
  &lt;li&gt;learning fundamentals doesn’t mean we have to learn all fundamentals through all the layers at one time
    &lt;ul&gt;
      &lt;li&gt;professional instruction is very very very important&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name>Xullnn</name></author><category term="Work" /><category term="programming" /><summary type="html">为什么掌握(master)基础知识很重要。</summary></entry><entry><title type="html">Developing better understanding about the 3 main types of enumerating operation on ruby collection through each, map, and select</title><link href="http://localhost:4000/life/each-map-and-select/" rel="alternate" type="text/html" title="Developing better understanding about the 3 main types of enumerating operation on ruby collection through each, map, and select" /><published>2018-08-06T00:00:00+08:00</published><updated>2018-08-06T00:00:00+08:00</updated><id>http://localhost:4000/life/each-map-and-select</id><content type="html" xml:base="http://localhost:4000/life/each-map-and-select/">&lt;p&gt;辨析三个不同的迭代术语所指代的具体操作含义。&lt;/p&gt;

&lt;p&gt;Let’s start with some code:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Can you tell the return value of the code above? What about swapping the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;map&lt;/code&gt; method with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;each&lt;/code&gt;, or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;select&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;When we are new to programming, many may feel methods like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;each&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;map&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;select&lt;/code&gt; are so similar to each other. They look like just &lt;em&gt;‘visit every object in the collection, do something, then leave.’&lt;/em&gt; And we can find many questions like “what’s the difference between each and map in Ruby?” or “When I should use each and when map?” out there. It may take a long period for us to completely understand how these methods behave.&lt;/p&gt;

&lt;p&gt;Truth be told, if we knew several basic facts about these methods, things would become badly understandable. I’ll throw them out first.&lt;/p&gt;

&lt;h3 id=&quot;facts-we-need-to-know&quot;&gt;Facts we need to know&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Notice the common strucutre of the methods calling is &lt;strong&gt;method + block&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Three basic types&lt;/strong&gt; of enumerating operations: iteration(traverse), transformation, selection.
    &lt;ul&gt;
      &lt;li&gt;iteration(traverse): represented by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;each&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;transformation: represented by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;map&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;selection: represented by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;select&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;How&lt;/strong&gt; the three types of methods care about the return value of the block&lt;/li&gt;
  &lt;li&gt;What’s the &lt;strong&gt;Return value&lt;/strong&gt; of the block&lt;/li&gt;
  &lt;li&gt;What is the &lt;strong&gt;final return value&lt;/strong&gt; of the method calling&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;notice-the-common-strucutre-of-these-methods-calling-is-method--block&quot;&gt;Notice the common strucutre of these methods calling is &lt;strong&gt;method + block&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;This is obvious.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;collection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# do something&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;is the same as:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;collection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# do something }&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;each&lt;/code&gt; is the method we are using, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;do...end&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{  }&lt;/code&gt; part are different syntaxes.&lt;/p&gt;

&lt;h3 id=&quot;three-basic-types-of-enumerating-operations-iterationtraverse-transformation-selection&quot;&gt;&lt;strong&gt;Three basic types&lt;/strong&gt; of enumerating operations: iteration(traverse), transformation, selection.&lt;/h3&gt;

&lt;p&gt;As we mentioned at the beginning–three types: iteration(traverse), transformation, selection.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;iteration(traverse)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The typical representation of this type is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;each&lt;/code&gt; method. It just ‘visit’ the objects in the collection one by one while it may do something to the object or do nothing. Then it always returns the original caller object, unless you have changed some objects in the original collection during iteration, but normally the caller won’t be changed, since it’s not a good habit.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; [1, 2, 3]&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;return_value_of_each&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
                         &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
                       &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; [1, 2, 3]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;return_value_of_each&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;object_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;object_id&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Most important, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;each&lt;/code&gt; do not care about the return value of the block. It directly return the caller object.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;transformation&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The typical representation of this type is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;map&lt;/code&gt; method. There are 2 main differences between &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;map&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;each&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;map&lt;/code&gt; will return a new array, not just the caller&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;map&lt;/code&gt; cares about the return value, not just ‘visits’ every object&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; [1, 2, 3]&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;return_value_of_map&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
                      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; [1, 4, 9]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;return_value_of_map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;object_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;object_id&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Another important thing is the returned array of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;map&lt;/code&gt; will always keeps the same size as the original collection. It creates a new array, fills every position with the return value of the block–no matter what is the return value.&lt;/p&gt;

&lt;p&gt;What would the return value of the code below?&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[nil, nil, nil]&lt;/code&gt;. Why? We can use some code to explain this:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;I'm not nil&quot;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; nil&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;I'm not nil&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; [nil]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let’s take a look at a tricky example:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; [1, 2, 3]&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;return_value_of_map&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; [1, 2, 3]&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;return_value_of_map&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; [1, 2, 3]&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; [1,4,9]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Why the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;return_value_of_map&lt;/code&gt; is still same as the original &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nums&lt;/code&gt;? No they are not the same. Remember how Ruby determines the return value? The last line, here it is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i += 1&lt;/code&gt;, this is why we get &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[1,2,3]&lt;/code&gt; again.&lt;/p&gt;

&lt;p&gt;When mapping through the array, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nums[i] = num**2&lt;/code&gt; was actually mutating the original array, so after the whole procedure, nums has been changed to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[1,4,9]&lt;/code&gt;. But since we were using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;map&lt;/code&gt; not &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;each&lt;/code&gt;, it will not return the caller(now is [1,4,9]), it returns a new array which contains every return value coming from each iterating step, or say, the return values of the block.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;selection&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The typical representation of this type is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;select&lt;/code&gt; method. Much like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;map&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;select&lt;/code&gt; also cares about the return value of every iterating step(return value of the block). But it not just simply picks up the return values then pushes them into a container object. It first evaluates the return value’s to truthiness, then use this truthiness as its choosing criteria–this is why this type named ‘selection’–since every ‘selection’ needs a criteria.&lt;/p&gt;

&lt;p&gt;First a simple example:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;hash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;a: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;b: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;c: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;d: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; {:a=&amp;gt;1, :b=&amp;gt;2, :c=&amp;gt;3, :d=&amp;gt;4}&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;odd?&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; {:a=&amp;gt;1, :c=&amp;gt;3}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Three things need to notice:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;select&lt;/code&gt; returns a new hash&lt;/li&gt;
  &lt;li&gt;return hash may smaller than the original caller&lt;/li&gt;
  &lt;li&gt;during the iterating, whenever the block’s return value evaluated to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;true&lt;/code&gt;, the corresponding object in current step will be chose.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Another example:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;hash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;a: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;b: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;c: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;d: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; {:a=&amp;gt;1, :b=&amp;gt;2, :c=&amp;gt;3, :d=&amp;gt;4}&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;false&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; {:a=&amp;gt;1, :b=&amp;gt;2, :c=&amp;gt;3, :d=&amp;gt;4}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;All the key-value pairs were selected. The reason is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;false&quot;&lt;/code&gt; will always evaluates to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;true&lt;/code&gt; in Ruby. And the returning hash has the same size as the original one. But we should know the returning hash and the original hash are not same object though they look same.&lt;/p&gt;

&lt;p&gt;For the sake of clarity, let’s took a look at how Ruby handles the return value of the block.&lt;/p&gt;

&lt;h3 id=&quot;how-the-three-types-of-methods-care-about-the-return-value-of-the-block&quot;&gt;How the three types of methods care about the return value of the block&lt;/h3&gt;

&lt;p&gt;In short, the return values of block are all objects, that’s it. But we have seen that different methods handle return value differently:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;the ‘iteration(traverse)’ ones don’t care about the return values of block.&lt;/li&gt;
  &lt;li&gt;the ‘transformation’ ones only care about the exact returning object of block.&lt;/li&gt;
  &lt;li&gt;the ‘selection’ ones first need to turn the return object into boolean value then make its choice&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The ‘transformation’ ones only care about the exactly returning object of blokcs. That’s easy, we just need to comfirm what’s the exact returning object in each step, then put them into new array.&lt;/p&gt;

&lt;p&gt;The ‘selection’ ones need an additional step – evaluate the truthiness of the returning object.&lt;/p&gt;

&lt;h3 id=&quot;whats-the-return-value-of-the-block&quot;&gt;What’s the &lt;strong&gt;Return value&lt;/strong&gt; of the block&lt;/h3&gt;

&lt;p&gt;Unless we explicitly use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;return&lt;/code&gt; in our program, Ruby would use &lt;em&gt;the last line&lt;/em&gt;’s result as the return value. Here we only care about the return value of the block. And anything but &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nil&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;false&lt;/code&gt; objects will be evaluated to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;false&lt;/code&gt; in Ruby.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The truthiness of **Return value&lt;/strong&gt; of the block**&lt;/p&gt;

&lt;p&gt;Based on the rule we mentioned above, all the truthiness of these situations will be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;false&lt;/code&gt; in Ruby:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;!!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;!!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;!!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;true&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And all the situations below will evaluated to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;true&lt;/code&gt; in Ruby:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;!!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;!!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;!!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;!!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([])&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;!!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Keep these in mind especially when you were using ‘selection’ ones.&lt;/p&gt;

&lt;h3 id=&quot;what-is-the-final-return-value-of-the-method-calling&quot;&gt;What is the &lt;strong&gt;final return value&lt;/strong&gt; of the method calling&lt;/h3&gt;

&lt;p&gt;We talked about a lot about the return value of block, at this level return value determines how these methods behave step by step into collection’s ‘body’. Beside we also care the return value of the whole method calling. Actually we have talked this:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;‘iteration(traverse)’ ones return the original caller object.&lt;/li&gt;
  &lt;li&gt;‘transformation’ ones return a new array.&lt;/li&gt;
  &lt;li&gt;‘selection’ ones prefer to return a new collection object that has the same type of the original collection.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;summary&quot;&gt;Summary&lt;/h3&gt;

&lt;p&gt;Now it’s more easy to answer the question we mentioned at the beginning, the answer is:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;map&lt;/code&gt; =&amp;gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[nil, nil, nil]&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;each&lt;/code&gt; =&amp;gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[1,2,3]&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;select&lt;/code&gt; =&amp;gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Facing various methods about different collection objects. We just need to slow down, think about:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;What kind of method it belongs to: iteration(traverse), transformation, selection?&lt;/li&gt;
  &lt;li&gt;For this kind of method, what’s the way it handles the return value of the block: doesn’t care, care exact object, care truthiness?&lt;/li&gt;
  &lt;li&gt;Go through every line into the block carefully, figure out the return value of the block.&lt;/li&gt;
  &lt;li&gt;What’s the return value(more accurate description shoule be object) of the whole method calling?&lt;/li&gt;
  &lt;li&gt;Feel free to check the ruby doc out.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Just for fun, guess what’s the return value of the code below:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Xullnn</name></author><category term="Life" /><category term="programming" /><summary type="html">辨析三个不同的迭代术语所指代的具体操作含义。</summary></entry><entry><title type="html">How to learn a foreign language</title><link href="http://localhost:4000/life/how-to-learn-foreign-language/" rel="alternate" type="text/html" title="How to learn a foreign language" /><published>2018-07-21T00:00:00+08:00</published><updated>2018-07-21T00:00:00+08:00</updated><id>http://localhost:4000/life/how-to-learn-foreign-language</id><content type="html" xml:base="http://localhost:4000/life/how-to-learn-foreign-language/">&lt;p&gt;一本关于如何学习外语的书籍的翻译摘抄以及笔记。&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;作者: &lt;a href=&quot;https://en.wikipedia.org/wiki/Paul_Pimsleur&quot;&gt;Paul Pimsleur&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Amazon:&lt;/p&gt;

&lt;p&gt;https://www.amazon.com/How-Learn-Foreign-Language-Pimsleur-ebook/dp/B00DX0F2XO/ref=sr_1_1?s=books&amp;amp;ie=UTF8&amp;amp;qid=1532451983&amp;amp;sr=1-1&amp;amp;keywords=how+to+learn+a+foreign+language+pimsleur&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;paul-pimsleurs-life--career&quot;&gt;Paul Pimsleur’s Life &amp;amp; Career&lt;/h2&gt;

&lt;p&gt;His research focused on understanding the language acquisition process, especially the learning process of children, who speak a language without knowing its formal structure. The result of this research was the Pimsleur language learning system.
Through this research, he identified three factors that could be measured to calculate language aptitude: verbal intelligence, auditory ability, and motivation. He was one of the first foreign language educators to show an interest in students who have difficulty in learning a foreign language while doing well in other subjects.&lt;/p&gt;

&lt;p&gt;Paul 的研究集中于理解语言习得过程，尤其是儿童的学习过程，他们能在不知道语言正式结构的情况下使用语言。他总结出一套自己的语言学习系统，通过研究，他提出了识别语言天赋的3个可测因素：表达能力，听觉能力，以及动机。 它是早期展示出对能学好除外语以外科目的学生的兴趣的语言教学者之一。&lt;/p&gt;

&lt;h2 id=&quot;the-whys-of-language-learning&quot;&gt;The “Whys” of Language Learning&lt;/h2&gt;

&lt;p&gt;How a person does with languages in grade or high school provides virtually no indication of how he might fare trying to learn them as an adult. But one must overcome powerful misgivings in many cases. How does one do this? And how does one master a language? Why would one want to learn a language? How long should it take? How should one go about it? These are the prime questions to which this book addresses itself.&lt;/p&gt;

&lt;p&gt;中学时期的外语学习经历可能对你成年后的外语学习毫无指导意义，但在多数情况下我们必须克服大量的障碍。如何做到这一点？ 一个人应该如果掌握一门语言？ 为什么我们想要学外语？ 需要多长时间？ 如何着手学习？ 这些都是这本书主要回答的问题。&lt;/p&gt;

&lt;h3 id=&quot;1-everyone-can-learn-another-language&quot;&gt;1. Everyone Can Learn Another Language&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Intelligence - 智力&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;According to reliable studies, only about 16 percent of what it takes to learn a foreign language is attributable to intelligence-at least as defined by IQ tests.&lt;/p&gt;

&lt;p&gt;据可靠研究，智商对于语言学习的影响占比只有16%–这里的智商指用智力测试测出来的值。&lt;/p&gt;

&lt;p&gt;Doing well in languages, like doing well at business, politics, or love, calls for more than the type of intelligence that makes you successful in school. It demands qualities like persuasiveness, sensitivity, gaiety, and perseverance, which IQ tests make no attempt to measure.&lt;/p&gt;

&lt;p&gt;学好语言，就像擅长商业，政治，或者爱，不仅仅需要’智商’这中让你在学校中成功的智慧。还需要说服力，敏感度，乐观，坚持不懈这些智商测试没有覆盖到的品质。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Musical Ability - 音乐才能&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;很多研究显示，音乐才能对语言学习的贡献占比约10%。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Language Talent and You - 语言天赋以及自身&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;很多有能力的成年人无法忍受学习语言过程中，自己表现出来的愚蠢和笨拙，一些最简单最基本的内容都可能让他们感到挫败，这让他们受到了自己的’无能’，也是他们无法忍受的情况。&lt;/p&gt;

&lt;p&gt;Discouragement, frustration, and fatigue produce a tremendous impulse to give up before one gets far enough for competence to bring its own reward. The best defense against this is to know before starting exactly what you want to accomplish and why.&lt;/p&gt;

&lt;p&gt;灰心，挫败，以及疲乏会产生巨大的阻力，让我们在达到能够看见回报的水平之前放弃。而对抗这种情况的最好方法是在你开始之前，明确的知道你想要达到和获得的是什么，以及为什么。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why Learn a Foreign Language? - 为什么学第二语言&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;一些错误的意图是：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;模糊的觉得第二语言可以让自己找到更好的工作&lt;/li&gt;
  &lt;li&gt;学习祖辈生活所在地的语言以’寻根’&lt;/li&gt;
  &lt;li&gt;觉得如果不会一门第二语言会显得自己没受过良好教育&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I think the best answer to “Why learn a foreign language?” is that it may make one’s life richer. Not only after one knows it, but even during the learning. That languages take time to learn becomes a plus instead of a drawback when one considers how such a long-range commitment gives focus and continuity to a period of one’s life. Viewed as a decision to fill a stretch of time with stimulating, purposeful activity, the undertaking of learning a foreign language can be a delightful voyage full of new expressions and ideas. One is glad to go slowly and savor the trip, especially when there are no judges to satisfy other than oneself.&lt;/p&gt;

&lt;h3 id=&quot;2-when-is-a-language-easy-to-learn&quot;&gt;2. When Is a Language Easy to Learn?&lt;/h3&gt;

&lt;p&gt;Contrary to what most people believe, pronunciation is not the hardest feature of a language to master. Nor is grammar.
A language-any language-has three distinct components: pronunciation, grammar, and vocabulary. A closer look at these components will reveal that the third is the most difficult to master.&lt;/p&gt;

&lt;p&gt;与大多数人相信的相反，发音并不是语言中最难掌握的部分，也不是语法。而是词汇。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pronunciation - 发音&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;人类拥有共同的发音器官，能发出的音也受同样的生理限制。一种语言的发音构成不可能太过复杂，不然听的人会很费力。世界上任何一种语言的发音都不会低于 夏威夷土语（15种）的数量，也不会高于 高加索语（60种），多数介于二者之间，比如英语就由31种发音构成。且绝大多数语言中难以模仿的发音都少于12个。相对于语法和词汇，发音是相对容易的部分。&lt;/p&gt;

&lt;p&gt;Relatively speaking, pronunciation poses less of a learning challenge than grammar or vocabulary.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Grammar - 语法&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;很多掌握多门语言的人都称当学会两门外语后，语法学习会变得越来越简单，他们发现这些表面复杂的语法背后有一套简单的、通用的底层原则。&lt;/p&gt;

&lt;p&gt;The basic grammar of a language can generally be explained, with copious examples, in fewer than one hundred pages.&lt;/p&gt;

&lt;p&gt;一种语言的基本语法，通常能在100页内解释清楚，并且还是在带有大量例句的情况下。虽然真的有人通过消化这类书籍掌握语法，但并不推荐这种方法，确有其他更人性的方法存在。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Vocabulary - 词汇&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Words, words, words. It takes about fifteen hundred of them for a “basic” command of a language and perhaps five thousand to be really fluent. This is a challenge to anyone’s learning ability, however gifted he may be.&lt;/p&gt;

&lt;p&gt;如果你将要学习的外语与你的母语或你已经掌握的其他语言很类似，你可以找到很多对应或相似的词汇，那么你对词汇的学习就会更容易。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Which Are the “Easy” and “Hard” Languages? - 最容易学和最难学的语言&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;这个排名的数据来源是，the Foreign Service Institute of the U.S. Department of State(美国国务院外交学院)，这个机构专门训练那些需要到世界各地任职的外交官和其他政府雇员。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://s3-ap-southeast-1.amazonaws.com/image-for-articles/image-bucket-1/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7+2018-07-21+%E4%B8%8B%E5%8D%881.58.43.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;根据上面的表格可以看出，’越相似越好学’也不是绝对的情况。&lt;/p&gt;

&lt;h3 id=&quot;3-how-long-does-it-take-to-learn-a-language&quot;&gt;3. How Long Does It Take to Learn a Language?&lt;/h3&gt;

&lt;p&gt;‘Learn a Language’ 是一个很不准确的描述。对于掌握一门语言来说，从会说几个单词到如母语般精通，中间有很多个层级。即使’如母语般精通’也是个很模糊的描述，同样使用母语，不同的人水平的差别也可能是巨大的。&lt;/p&gt;

&lt;p&gt;基于美国外交学院提供的数据以及作者自己的研究，对于’掌握一门外语’所需要的时间的估算如下。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The FSI Rating Scale - 基于FSI的分级标准&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Many U.S. government agencies use the FSI Absolute Language Proficiency Ratings to measure a prospective employee’s ability to use a foreign language in his work.&lt;/p&gt;

&lt;p&gt;FSI 有一个叫 FSI绝对语言熟练度排名 标准来考量准雇员在工作中使用外语的情况。具体分为了5级：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;ol&gt;
      &lt;li&gt;Elementary proficiency. The person is able to satisfy routine travel needs and minimum courtesy requirements.
1 初级熟练： 满足日常旅行需求以及最小礼仪要求。&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;ol&gt;
      &lt;li&gt;Limited working proficiency. The person is able to satisfy routine social demands and limited work requirements.
2 有限的工作级熟练： 满足日常社交需求和有限的工作需求。&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;ol&gt;
      &lt;li&gt;Minimum professional proficiency. The person can speak the language with sufficient structural accuracy and vocabulary to participate effectively in most formal and informal conversations on practical, social, and professional topics.
3 最小专业级熟练： 语言表达具有足够的结构准确性，有足够的词汇应对大多数正式或非正式的实践，社交，以及专业类话题。&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;ol&gt;
      &lt;li&gt;Full professional proficiency. The person uses the language fluently and accurately on all levels normally pertinent to professional needs.
4 完全专业级熟练： 能流利以及准确的应对所有层级的专业相关对话需求。&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;ol&gt;
      &lt;li&gt;Native or bilingual proficiency. The person has speaking proficiency equivalent to that of an educated native speaker.
5 本地级或双语级熟练： 达到受过教育的当地人的语言使用水平。&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;下面的表格统计了在FSI培训项目中，学员达到相应水平需要的学习时间：&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;容易学的语言&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt; &lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt; &lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;难学的语言&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt; &lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;训练周期&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;熟练程度&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;训练周期&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;熟练程度&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;8周 240小时&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1\1+&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;12周 360小时&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1\1+&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;16周 480小时&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;24周 720小时&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1+/2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;24周 720小时&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2+&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;44周 1320小时&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2/2+/3&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;上面的数据基于FSI特定类型的训练： 高强度的每天6小时，每周5天，班级成员小于10，由老道的语言学家和受过良好训练的本地教官教学。这种学校是学习语言的天堂，而且学生都高度积极，乐观。但对于我们大多数人来说不可能有这种条件，我们很多人只能参加一次45分钟，一周两三天的普通课程。&lt;/p&gt;

&lt;p&gt;人的注意力资源是有限的，一天6小时高强度的训练中必然有一部分是用于’必要的浪费’的， 比如休息，白日梦，整理思路等。而且人脑吸收和固化知识是需要周期的，有些知识需要一段时间后才能真正’学懂’，而这对于我们没有条件参加集中高强度训练的人来说是个有时。从总体时间来看，将学习时间分散到很长一段时期内也许需要的时间更少。&lt;/p&gt;

&lt;p&gt;总而言之，你想要达到的水平不同，你要花的时间和精力也会不同。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Alternative Goals - 其他可能的目标&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;多数人可能对FSI那种训练方式不感兴趣，且可能没有那么高的目标。那么这种情况下对学习时间的估计就要基于普通人群使用的普通方法。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;The “courtesy and necessity” speaking level - 基本礼节水平&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;如果你只是想掌握基本的与人礼貌交流的语言，比如点餐，寻求医生的帮助等。基于作者语言学习项目中的统计，大约60小时内，或者2到3个月就可以达到。不要低估了这个层级的掌握，这足以给一个人的生活带来巨大改变。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Reading only - 阅读需求&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;如果你只想阅读而准备放弃口语，那么100-150小时就能让你阅读工作相关的材料。如果一周学习6小时也就只需要半年左右，这也是一项投入少而收获丰富的投资。但要注意，不要期望你的阅读能力会对你的表达（口语）能力有所帮助。说和读是完全不同的活动，并且虽然阅读可以增肌词汇量但却可能毁掉你的发音。&lt;/p&gt;

&lt;p&gt;However, you should not expect your reading skill to help you if you later decide to learn to speak. Speaking and reading are two very different activities, and though reading builds vocabulary, it may actually damage pronunciation.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Balanced competence - 均衡发展水平&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;能较为轻松地写作，听懂谈话的主旨，书写令人满意的商业或个人书信。想达到这个水平，对于普通天赋的人，如果每周6小时，坚持两年左右的正规训练可以达到。但在这个水平，不要期望你能听懂你听到的所有内容。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Educated mastery - 教育级精通&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;想要完全掌握演讲和协作，你或许必须有1年半的时间生活在国外。一个好的策略是先自学半年，然后出国待至少一年，这一年你被强迫只能使用外语。此后你将会理解大多数说的，以及电视和电影，几乎不依赖字典阅读和写作。很多人出国生活几个月之后，慢慢适应了每天都使用外语的情景，最后他们完全吃透了这门语言，这门语言也将贯穿他们一生。&lt;/p&gt;

&lt;p&gt;Some people are dismayed by time estimates that run to hundreds of hours. They feel that this is more time than they are willing to commit. They should reflect on the fact that one year from today they will be one year older whether they undertake this learning task or not. The only question is whether, on that day, they are going to be well along toward mastering the language they have dreamed of knowing, or whether it will still be only a dream.&lt;/p&gt;

&lt;p&gt;有些人听到要花这么多时间就感到灰心，这跟他们想象中愿意付出的时间差的太多。这些人应该深思一下，一年之后不管你有没有着手学习你都老了一岁。唯一的问题是，到那个时候你是离你掌握外语的梦想更近了一步，还是说那仍然还只是个梦想。&lt;/p&gt;

&lt;h3 id=&quot;4-which-language-should-you-select&quot;&gt;4. Which Language Should You Select?&lt;/h3&gt;

&lt;p&gt;When actress Ingrid Bergman, who knew five languages, was asked which she preferred, she replied: “English for acting, Italian for romance, French for diplomacy, German for philosophy . . . and Swedish for secrecy, because so few people know it.&lt;/p&gt;

&lt;p&gt;女演员 &lt;a href=&quot;https://en.wikipedia.org/wiki/Ingrid_Bergman&quot;&gt;Ingrid Bergman&lt;/a&gt; 懂5种语言，当她被问及最喜欢哪种时她回答：用英语表演，意大利语负责浪漫，法语用于外交，德语用于哲学…瑞典语用来保密，因为很少的人懂这门语言。&lt;/p&gt;

&lt;p&gt;If you have very strong motives for learning some particular language, you may want to skip the following discussion of the hard and easy points of various languages, for a strong desire to learn can override all other considerations.&lt;/p&gt;

&lt;p&gt;如果你已经很明确自己要学哪门语言，你可以跳过本章。&lt;/p&gt;

&lt;h3 id=&quot;5-learning-the-tricks-of-the-trade&quot;&gt;5. Learning the “Tricks of the Trade”&lt;/h3&gt;

&lt;p&gt;讲述了一个会29种语言的人是如何学习各种外语的。作者’会’ 这个词是个很具误导性的词，很多人可能只会说几句日常用语，而其他人就视其为’会’这门语言。&lt;/p&gt;

&lt;p&gt;这章的核心主旨是有的人可能无法长时间集中注意力，那就用短时间穿插学习，你总是可以找到好的可以利用的学习语言的时间，不管你认为你有多忙。&lt;/p&gt;

&lt;h3 id=&quot;6-organic-learning&quot;&gt;6. Organic Learning&lt;/h3&gt;

&lt;p&gt;学习与进步应该是一个自然的过程，并不是一次一个知识模块的堆砌。要放下对完整性的执念，不管你是在由着兴趣探索还是在遵循有纪律的训练，你都要知道，你有权选择，有些知识你现在无法掌握，那就暂时放下，你知道你可以回过头来再学。&lt;/p&gt;

&lt;p&gt;你也应该寻找和选择一个好的老师，也许你需要试过很多个才能找到最适合你的那个，但这是值得的。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How to recognize a good teacher - 如何识别一个好的老师&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;引导学生多说，而不是老师一个人说&lt;/li&gt;
  &lt;li&gt;教学中多用外语而不是母语&lt;/li&gt;
  &lt;li&gt;保持语法解释的简洁&lt;/li&gt;
  &lt;li&gt;避免课堂上与单个学生过多交流&lt;/li&gt;
  &lt;li&gt;尽量与不同的学员互动&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Teachers are paid professionals. They should be judged, at least in part, the cost-accounting way: by output per unit of time. A student is entitled to ask whether the hours he spends in the language class are giving him a fair return in usable language skills.&lt;/p&gt;

&lt;p&gt;教师作为能获得酬劳的职业，理因受到评价。&lt;/p&gt;

&lt;h3 id=&quot;7-the-words-and-the-music&quot;&gt;7. The Words and the Music&lt;/h3&gt;

&lt;p&gt;One way to begin is by imitating, in English, the accent of the language you have chosen. It is like learning the music of a song first, so you can later concentrate completely on the words.&lt;/p&gt;

&lt;p&gt;想要完全掌握一门语言，起步阶段模仿是一种好的策略，比如你选择的一种英语口音。这就像你学一首歌是先从哼哼旋律开始，而不是以上来就专注于歌词。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Trust your ear - 相信你的耳朵&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Many people, even many teachers, fall prey to the fallacy that the written form of a language is the language itself. Such teachers then make the error of teaching from the written to the spoken language, instead of vice versa.&lt;/p&gt;

&lt;p&gt;很多人甚至是老师，都掉入了一个陷阱，认为文字就是语言本身。有这种错误认识的老师是从写开始教，再到说，而不是反过来。&lt;/p&gt;

&lt;p&gt;Pierre Delattre, a respected authority on languages and language teaching, explains why this is wrong.&lt;/p&gt;

&lt;p&gt;It appears that the basic error in language teaching methods is one of order. We put the cart before the horse. We use the eye before we use the ear; we take up writing before we take up speaking; we teach reading before we teach pronouncing; we study the rules before we study the examples; we concentrate on quantity before we concentrate on quality. In all this, our error is that we go against the facts of language. A language is first of all “speech”-a system of sounds transmitted directly from mouth to ear and produced by automatic reactions of the speech organs. The functioning of those automatic reactions depends on the linguistic habits of the speaker, and it is the acquisition of those habits that must come first.&lt;/p&gt;

&lt;p&gt;Language, as Delattre says, is above all speech, not writing: a language that is not spoken is called “dead.” If you will trust your ear, you are almost certain to speak with a good accent. Conversely, if you trust your eye alone, your accent may be a poor one.&lt;/p&gt;

&lt;p&gt;Pierre Delattre 是一位受人尊敬的语言和语言教学的权威，他如此描述这种错误：&lt;/p&gt;

&lt;p&gt;语言教学中一个基本的错误之一就是顺序上的错误。我们把车放到了马的前面。将眼睛置于耳朵之前；将写作置于说话之前；将阅读教学置于发音教学之前；将规则置于实例之前；将数量置于质量之前。所有这些，都与语言的实际相悖。一种语言最开始完全是 ‘说’ 的系统，这个系统直接将信息从嘴传到耳朵，引发发声器官的自动反应。这些自动反应功能依赖于说话者的语言习惯，而这些习惯的获得才是第一位的。&lt;/p&gt;

&lt;p&gt;如 Delattre 所说， 语言, 最重要的部分是说，而不是写： 一种不被’说’的语言是死亡的。如果你相信自己的耳朵，几乎可以确信你能有好的口音。反过来，如果你只相信你的眼镜，你的口音就会很糟糕。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Short-range objectives&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Learning a foreign language is like filling a bucket from a slow-running tap. If you keep looking in to see if it is full, you grow more and more impatient.&lt;/p&gt;

&lt;p&gt;学习外语就像缓慢地往木桶中滴水。如果你一直关注桶里的水满没有，那会变得越来越不耐心。&lt;/p&gt;

&lt;p&gt;因此设置短期、中期、长期的目标和反馈机制是必要的。&lt;/p&gt;

&lt;h2 id=&quot;the-hows-of-language-learning&quot;&gt;The “Hows” of Language Learning&lt;/h2&gt;

&lt;p&gt;不管你找到的是多优秀的老师，自学是不可避免的，下面提出一些列可以参照的原则。当然每个人都要根据自己的特点，学习风格发展出适合自己的学习策略和技巧。&lt;/p&gt;

&lt;h3 id=&quot;8-how-to-practice-pronunciation&quot;&gt;8. How to Practice Pronunciation&lt;/h3&gt;

&lt;p&gt;The music of a foreign language is different from the words.&lt;/p&gt;

&lt;p&gt;一种外语的节奏语调是和语言文字分离的。你可以在只会几个发音的情况下，组合一些列无意义的句子，让外行觉得你会这门语言。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Think sounds, not letters - 对声音做出反应，而不是文字&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Probably the biggest impediment to good pronunciation is picturing how a word is written while saying it. The written letters are associated in our minds with English sounds. Consequently, these English sounds rise automatically to our lips instead of the foreign ones, and we must spend part of our energy in combatting this tendency. There is nothing hard about saying the French word for “son,” which is pronounced “feess”-until you see it written down: fils.&lt;/p&gt;

&lt;p&gt;或许练好发音最大的障碍就是在说一个单词的时候在脑中脑补这个单词是怎么写的。而对于我们的母语，发音和文字是联系在一起的。作为结果，这些英文发音会自动从我们嘴里冒出而不像使用外语那样，我们必须花费精力来纠正这种分离的倾向。我们可以毫不费力的发出法语中’儿子’的音 feess 而在看到它之前我们根本就不用知道他的拼写是 fils.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Never look at the letter r - 永远不要盯着字母r看&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;英语中r的发音相对其他语言舌头更卷，英语母语着如果在学外语的时候看着r， 会让发音学习更难。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;The correct learning sequence - 正确的学习顺序&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The correct learning sequence is this: listen carefully to get the sound firmly planted in your ear; then gradually imitate it with your tongue. Do not use your eye till you have the pronunciation down pat.&lt;/p&gt;

&lt;p&gt;正确的顺序是：仔细倾听传入你耳中的声音；然后借助舌头慢慢模仿发音。在你弄清楚发音之前不要使用你的眼睛。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;The longer a word, the harder - 音节越多发音越难&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;对于音节很多的词，将其拆分练习。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Start from the end - 反向练习发音&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;练习陌生单词可以从尾部的音节向前练，这样会让你不会漏掉其中的某个音。&lt;/p&gt;

&lt;p&gt;Instead of saying na-, then -cio-, and so on, you should begin at the end instead. Say -dad, then -lidad, etc.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Work with a model - 找到好的模仿对象&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;在你固化你的发音习惯之前，要经常参照好的发音对比纠正自己的发音。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Use a tape recorder - 使用声音记录设备&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;（此条建议稍过时）。主旨是使用各种技术手段来辅助自己的学习过程。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Sample pronunciation drills - 跟读模仿训练&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;尽量使用发音纯正的native材料跟读练习。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Every sounds is important - 每个发音都很重要&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;每一门语言中可能都存在一些很近似的发音，这可能让初学者十分困扰，这些发音如此相似让人觉得似乎难以分离。但对于这门外语作为母语的人来说，差别再细微的发音之间也有天壤之别。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Shoot all problems on sight - 留心所有问题&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;不要轻易放过语言学习过程中遇到的每一个小问题。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Don’t practice single sounds - 不要练习单个发音&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;不要孤立的练习音节，练习要在一定的背景中进行。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Think in sound-clusters - 以意群为单位思考&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Each sound is a little different depending on its setting, because of the way the tongue must glide from one sound to the next.&lt;/p&gt;

&lt;p&gt;同一个音在不同背景中的音会有所区别，因为我们舌头的运动在不同音之间的滑动转换动作不会完全相同。（这里的重点在于音与音之间的连接，比如连读滑音等。）&lt;/p&gt;

&lt;p&gt;You might say each word authentically and yet be unable to glide them together with a native-like accent. One must practice the glide as well as the sounds.&lt;/p&gt;

&lt;p&gt;你也许可以将单个音发得很准但连起来时却无法发出像本地人那样的发音。你必须像练习单个音节那样练习连读。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Practice whole phrase, not words - 练习词组而不是单词&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In real life, a string of words like “I don’t know” or “Not on your life” is said as though it were a single word, in one breath-group, without pausing. Similarly, if you stop to take a breath in the middle of a foreign phrase that should be said in a single burst, you are not saying it correctly; you even risk being incomprehensible. Most people think of language as a collection of single words, perhaps because dictionaries are arranged in one-word entries. But what is convenient in a dictionary actually does violence to the reality of language. In practicing pronunciation, it is best to think in terms of word-clusters and to practice the language that way.&lt;/p&gt;

&lt;p&gt;在实际生活中，像’I dont know.’ 或 ‘Not on your life.’ 这样的句子在表达时就像是一个单词一样一呼即出，没有停顿。类似的，你学外语时如果在那些应该一气呵成的表达之间有所停顿，那么就是不正确的，而且这很可能导致你语义理解上的错误。大多数人将语言理解成独立单词的集合，这或许是因为字典就是这样排版的。但字典这种方便查找的方式却是违背语言本质的。练习发音，最好是基于意群来练习和理解。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Mastering a difficult sound - 熟练掌握难发的音&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The important thing in mastering a difficult sound is to listen very intently, trying to discover what gives it its distinctive quality. Good pronunciation, as I have tried to explain, begins not in the mouth but in the ear.&lt;/p&gt;

&lt;p&gt;外语中可能存在个对你来说特别难发的音，对于这类发音要想尽各种办法分辨和练习。关键在于带着极强的意图去聆听，分析出是什么让这个音如此难发。好的发音，正如之前提到过的，始于耳朵而不是嘴巴。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Invite a friend to make fun of you - 邀请一个朋友来拿你寻开心&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;如果某句话你始终说不正确，可以找一个发音很好的朋友或者本地人，让他首先模仿你的发音，然后在念一遍正确的发音，你错误的发音–正确的发音，这样循环，你要做的就是在一旁仔细分辨到底是哪里导致了你发音上的偏差，不要着急再次投入练习，多听一下，直至你搞明白是哪里的问题。然后接着练习。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;If you block, stop - 如果你卡住了，停下来&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;学习外语需要很多的重复练习，在这种过程中你很容易陷入嘴在动而脑子里没有反应语义的情况。有时你会感觉练不下去了，这种情况下就暂停一下，适当调整后回来再接着练。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Diffucult sounds in each languages are few in number - 每种语言中难发的音都不多&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;很多人觉得自己的外语发音有大问题，而仔细分析后可能他们的发音中只有几个音需要纠正，而这些人却很容易在分析出具体问题后放弃努力，觉得太麻烦。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;When to say ‘the hell with it’&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;一口好的外语发音有很多好处，但是有一种意见认为很多口音很重的外来人口在美国也生活的不错。这中间存在着取舍。&lt;/p&gt;

&lt;p&gt;A person’s minimal goals should be: (1) to learn all the sounds of the foreign language so as not to risk saying one word for another, and (2) to speak the language with an inoffensive accent. Beyond that, the desire to possess a perfect accent must be weighed against the amount of practice and attention needed to obtain it.&lt;/p&gt;

&lt;p&gt;对于这些人来说他们的最低要求是：学会所有音节以免说错单词；避免冒犯到别人。在这之上，对于完美口音的追求要依你自己而定，你需要在好发音和更多的练习之间取舍。&lt;/p&gt;

&lt;h3 id=&quot;9-how-to-master-grammar&quot;&gt;9. How to Master Grammar&lt;/h3&gt;

&lt;p&gt;有很多例子可以证明似乎一个人不需要很好的语法就可以胜任一些外语相关的工作，我们传递信息的方式不仅有语言，加上动作、表情、语调等，我们可以补足很多语言上的缺失，但这并不是说你可以一直保持很烂的语法。随着你语言学习进程的进行，你应该逐渐努力提高自己的语法，不过如果你从一开始就坚持猛学语法，那你也很可能因挫败而放弃。&lt;/p&gt;

&lt;p&gt;过度重视语法是很多课堂教学失败的主要原因，这种教学方法是短视的，一个人可以通过各种方式来明白别人的话语。有些人是需要学语法，但却忽视了人际交流中的动作、表情、语调，社会习俗，我们低估了在自然交流中这类因素的权重。&lt;/p&gt;

&lt;p&gt;The emphasis should be on communication, and if your teacher does not put it there, then you must do it for yourself.&lt;/p&gt;

&lt;p&gt;重点应该放在交流上，但如果你的老师不重视，那你必须自己动手。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;How much grammar is there? - 语法知识有多少？&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is a legitimate question for someone undertaking a language to ask, so he can size up the total task before he starts. The rather encouraging answer is that all the grammar a person ever needs to know is covered in a typical year-long college course (two years in high school). After that, further courses merely repeat the same grammar in more complex sentences-sentences that become more literary as you advance, that is, further and further from normal speech.&lt;/p&gt;

&lt;p&gt;对于刚学一门语言的人来说这是一个合理的问题，这样他能在开始之前对知识总量有个了解。比较乐观的回应是，需要学习的语法知识基本可以在一年的大学课程中学完（或两年高中）。在那之后，那些深入的课程只是在更复杂的句子上重复同样的语法知识点–也就是那些更加书面和正式的表达。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;“Generative” Grammer - 生成语法&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The grammarian is mainly concerned with the orderliness and internal consistency of his analysis-not its teachableness. Hence, grammar is usually presented in a manner that violates the psychological learning principles mentioned in this book: anticipation, organic learning, the “need to know.&lt;/p&gt;

&lt;p&gt;语法学家的关注焦点是他们所做研究的顺序性和内在一致性–而不是’可教授性’。因此，语法知识通常以违背心理学学习原则的方式在这本书中被提起：预判，自然有机地学习，对知道的需求。&lt;/p&gt;

&lt;p&gt;乔姆斯基提出过’生成语法’的概念，但将这类知识应用到实际教学中的过程可能还很长，所以多数时候我们还是只有用传统的方法。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Fear of grammer - 对语法的恐惧&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The word “grammar” strikes terror into many people’s hearts, yet in reality the basic grammar of a language is reasonably easy to master. Grammar holds no terror for a three-year-old child as he learns his native language, because he assimilates it unconsciously, intuitively. Like bike-riding or roller-skating, one way to master grammar is by “feel,” with very little verbalization of rules. This is a viable alternative (or adjunct) to learning grammar by rules and examples, and since it is less familiar, I want to expound a little on how this intuitive approach works.&lt;/p&gt;

&lt;p&gt;语法这个词很容易引发人们心中的恐慌，但实际上语法基础是很容易被掌握的。一个三岁小孩对语法就毫无畏惧，因为他能无意识地，直觉式地吸收和领会。就像汽车和滑冰，一种掌握语法的方式是’感觉’， 只需要很少的口述的规则。这是一种变通的（或者辅助的）通过规则和例子来学习语法的方式，但这是一种对我们来说不那么熟悉的方式，我想阐释一下这类直觉式的学习方式。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Grammar through the ear - 经由耳朵的语法学习&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Pierre Delattre 曾做过一个实验，让两组学生学习语法规则，一组通过教授语法规则来学习，一组通过听录音来学习，结果是第二组能更轻松地吸收语法习惯，他们能在语义分析的背景下将看起来十分复杂的问题轻松化解。 借用音乐上的类比，他说通过规则学习语法就像经过一个听过某支曲子的人向你解释曲子的旋律那样，是一种二手信息传递。而直接通过谈话或录音学习，就像直接听那首曲子一样。这是唯一完全和准确理解语法的正确方式。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Grammar through oral practice - 通过口头练习学习语法&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;法语语法中的代词用法实际上并不难，但用语言文字解释出来则感觉很复杂。比如学习’非直接宾语代词’这个点，通常的学习方式是先学习’直接宾语’，接着学习’非直接宾语’，然后将二者结合起来学。大学课程中大概需要花费7-10天来学习代词知识。&lt;/p&gt;

&lt;p&gt;作者曾做过与Pierre Delattre类似的通过口头练习传授语法的实验，实验分为实验组和对照组，以代词为学习对象。&lt;/p&gt;

&lt;p&gt;实际实验中实验组进行了两次约30分钟的课程，他们使用录音学习，首先重复练习30个包含代词的句子。然后会进行一系列’模式练习’–比如磁带中会说’I receive the package’， 然后暂停，学生需要回复’I receive it.’。这类句子的复杂度会慢慢提高。在两次30分钟左右的课里他们大概听和说了100多个包含代词的不同结构的句子。&lt;/p&gt;

&lt;p&gt;控制组则按传统方式，他们先学习代词相关的规则，然后做一些练习，然后是另一些规则，然后是练习，最后是针对所有知识点的练习。他们总共在一周之内上了6次课。&lt;/p&gt;

&lt;p&gt;最后让两个组参加同样的测试，结果是只上了两次课的实验组比那些花一周时间学习的控制组成绩稍好。解释这种差别的逻辑很简单。实验组学生听了大量正确的法语句子，他们的听觉被调整到一种只有正确句子才会让他们感觉’听起来正确’的状态。而控制组中的学生必须依赖于规则，他们需要痛苦地拆解每一个句子。这不仅会花费更多的时间，还可能会因为对规则的误用犯下很多错误，因为他们没有’感觉上的正确性’作为支持。&lt;/p&gt;

&lt;p&gt;这种’正确的语感’通过长期的适应根植在每一个母语使用者脑中，能让他们遇到错误的句子时立即识别出来。外语学习者也需要发展这种’感觉’, 而最直接的获得这种能力的途径就是广泛的口头练习。很多老师也惊讶于这个实验结果，他们确信这种口头练习方式可以作为语法教学的替代方式或者作为传统方式很好的补充或辅助手段。&lt;/p&gt;

&lt;p&gt;Anyone can provide his own oral practice by using a tape or cassette recorder. What one needs to know is how to “program” a language exercise.&lt;/p&gt;

&lt;p&gt;By following a simple principle, one can turn a tape recorder into a sophisticated “teaching machine.” I call this principle “anticipation” because the learner must anticipate the correct response; he must say it himself before the tape says it.&lt;/p&gt;

&lt;p&gt;任何人都可以使用录音设配进行这种练习，练习者唯一需要知道的是如何搭建出一套练习规则。&lt;/p&gt;

&lt;p&gt;有一个简单的原则可以将录音设备变成精密的’教学机器’。我将这个原则称为’预判’，因为学习者必须预判正确的回复；他必须在录音响起之前回答。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Anticipation - 预判&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;最好的教学方式是：1 提出问题； 2 学习者回答问题； 3 播放正确回答。&lt;/p&gt;

&lt;p&gt;对语言初学者来说，这种模式随处可见，比如一个父亲与女儿的对话。通常是父亲提出一个问题，然后女儿试着回答，然后父亲再告诉她回答得正不正确，或者正确答案是什么。与这个原则相违背的一个常见错误是，很多老师让学生鹦鹉学舌般地重复句子，这样句子就能’沉淀’下来。但这种重复可能有相反的作用，使学习者变得迟钝，昏昏欲睡。一个词不不断的重复最终只会变成声音之间无意义的跳转。&lt;/p&gt;

&lt;p&gt;It is novelty that sparks the mind to attention; we perk up our ears at the unexpected. According to one internationally recognized neurophysiologist, H. W. Magoun, the known facts about the workings of the brain “plainly imply that repetition is the first law, not of learning, but of habituation, whose influence upon learning is a negative rather than a positive one. Obviously, the promotion of novelty rather than of repetition should become the primary law of learning.&lt;/p&gt;

&lt;p&gt;新奇的事物可以吸引注意力，意料之外的事物能使我们振奋。著名神经生理学家H. W. Magoun提出，已知的关于大脑工作的事实是”认为重复是第一律对于学习来说是有消极作用的。很显然相对重复而言，新奇才应该成为学习的第一律。” 将这个理论转化为一个学习公式就是’预判’原则中的三个步骤。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;CUE - PAUSE - RESPONSE - 提示：暂停：回答&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;利用 1 提问； 2 预判+回答； 3 播放正确答案 规则设计练习。&lt;/p&gt;

&lt;p&gt;Cue: Are you going to the movies today? (PAUSE)&lt;/p&gt;

&lt;p&gt;Response:  No, I went yesterday.&lt;/p&gt;

&lt;p&gt;Cue: Is your sister going to Europe this year? (PAUSE)&lt;/p&gt;

&lt;p&gt;Response:  No, she went last year.&lt;/p&gt;

&lt;p&gt;大约10个这样的对话可以构成一个’模式练习’, 两个这样的模式练习就可以让你熟悉 ‘to go’ 这种语法结构。&lt;/p&gt;

&lt;p&gt;随着你的进步，你的练习要随之变得复杂，但这里的复杂指的不是用更长的句子，而是将不同的语法点混入同一个句子中。比如将过去式的知识点和之前的’to go’融合在一起，这样在熟悉的语法结构上增加了意料之外的元素。关键点是能冒出’新奇’的东西，这种新奇感能加速学习。这种方式可用作为学习语法的主要手段，但很多老师因为觉得麻烦而不愿使用。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Pronouns - 代词&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The principle is simple enough: make up cues that will force you to use pronouns in the answer.&lt;/p&gt;

&lt;p&gt;在实际对话里，每个句子都几乎有1到2个代词，练习代词的原则是使用那些回答中肯定会用到代词的问题。&lt;/p&gt;

&lt;p&gt;但使用这种方式有一个必须做到的要求：必须忘记你在课堂中学到的那些需要回答’完整句子’的教条，给出更加自然的回应。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Verbs - 动词&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;动词形式的变化在所有语言中都是很多的，这无疑是语法学习中最耗费时间的难点，但幸运的是我们有方法让学习变得简单一点。&lt;/p&gt;

&lt;p&gt;I urge you to do this even at the risk of making some mistakes. Your eventual goal, after all, is to have in your mind a grammatical schema that will enable you to “generate” utterances in the foreign language. Mistakes are inevitable and unimportant, for this schema is a living, growing organism, and will be fleshed out, modified, and improved as you gain further knowledge of the language.&lt;/p&gt;

&lt;p&gt;REGULAR AND IRREGULAR VERBS - 规则动词和不规则动词&lt;/p&gt;

&lt;p&gt;把动词分为规则和不规则会引起学习者不必要的痛苦，这让他们误认为语言就应该是完美和没有例外的，那些例外的都应受到谴责。&lt;/p&gt;

&lt;p&gt;I prefer to assume instead, like Zorba the Greek, that “life has no exceptions.” A living language, like a living person, must be accepted as is, without prejudging how it is going to behave.&lt;/p&gt;

&lt;p&gt;我不赞成这种划分，就像电影”Zorba the Greek”中的台词 “生活没有例外”。一种活的语言，就像一个活的人，必须被如实地接受，不应带有’他应该如何行为’的先入之见。&lt;/p&gt;

&lt;p&gt;但幸运的是，语言内部的相似性是很强的，陌生的词很可能是由你熟悉的词组合而来，一个明显的事实是如果你知道了足够多的’不规则动词’后，你会发现他们当中也存在很多’规则’，这会让你更容易记忆。&lt;/p&gt;

&lt;p&gt;A DOZEN KEY VERBAL CONCEPTS. - 一些关键的动词概念&lt;/p&gt;

&lt;p&gt;动词们有一个明显的分布模式： 一些常见的动词(be, do, go …) 占据了绝大多数的动词出现次数分布。 这些动词几乎都是’不规则的’，也就是他们常在人们的舌边，因此他们的演化速度也更快。这些关键动词概念有：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;to be
to have
to be able
to come
to go
to know
to take
to want
to say or tell
to do or make
to see
to give
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;将这些作为最先学习的对象，识别他们的各种时态。如此之后，其他’不规则’动词将会很容易被掌握，同时，掌握这些为数不多的动词后，你就可以马上开始阅读门外语了。&lt;/p&gt;

&lt;p&gt;LEARN VERBS HORIZONTALLY - 横向学习动词&lt;/p&gt;

&lt;p&gt;传统的教学方式中，学习动词是单个进行的，然后给出这个动词的各种时态变化，这种分离的方式是不利于学习的，正确的方式应该是将几个动词放在一起，横向比较地给出这些动词的不同形式，以体现出他们之间变化的相似性，这种横向的学习更容被人所接受。&lt;/p&gt;

&lt;p&gt;-&lt;/p&gt;

&lt;p&gt;What you, as the learner, can do is to construct your own grammar in accordance with your own needs, taking the facts you learn in class or in your book and putting them together to suit your particular learning style.&lt;/p&gt;

&lt;p&gt;I urge you to do this even at the risk of making some mistakes. Your eventual goal, after all, is to have in your mind a grammatical schema that will enable you to “generate” utterances in the foreign language. Mistakes are inevitable and unimportant, for this schema is a living, growing organism, and will be fleshed out, modified, and improved as you gain further knowledge of the language.&lt;/p&gt;

&lt;p&gt;作为语言学习者，你能做的是根据自己的需求构建出自己的语法，将你学到的语法知识综合起来，以适应你特有的学习风格。&lt;/p&gt;

&lt;p&gt;我强烈建议你怎么做，即使冒着会犯错的风险。 毕竟你的最终目的是在脑中构建出自己的一套语法结构（模型），以支持你用这门外语进行表达。 犯错是不可避免的，也是不重要的，而这个语法模型是动态的，不断自然增长的，并且会随着你语言知识地增加被不断充实，修改和改善。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Learn the hardest thing firts - 先学最难的&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;我有点犹豫是否应该列出这个原则，但鉴于它相对于其他原则对我的帮助是最大的，我还是不能排除掉他。&lt;/p&gt;

&lt;p&gt;一个关于学习的普遍假设是学习应该是从简单到复杂的。但对于语言学习来说，我的建议是相反的。我的原则是：先学最难的，之后的东西都会变得简单。&lt;/p&gt;

&lt;p&gt;前面代词的例子提供了很好的例证，一次一个砖头的理论让我们先单独学不同类型的代词，最后将他们综合起来。 但实际情况是句子中有多个代词的情况学习起来更容易。同样的一个句子中有2个以副词的情况(The horse ran exceptionally fast)比只有1个副词的的情况更容易学，虽然需要多花一点精力，但是多个副词的情况更有趣。&lt;/p&gt;

&lt;p&gt;The simple-to-complex procedure is psychologically backward; one expends fresh energy on simple things and is fatigued by the time the complex ones arrive. The net result is often a sense of discouragement.&lt;/p&gt;

&lt;p&gt;‘由简入繁’的过程在从心理学角度来看是反向的； 一个人将新鲜的能量用在了简单的事情上，而在当事情变得复杂的时候却进入了疲乏阶段。 最后的结果通常是感到挫败灰心。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Gender - 性别&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;https://en.wikipedia.org/wiki/Grammatical_gender&lt;/p&gt;

&lt;h3 id=&quot;10-how-to-learn-vocabulary&quot;&gt;10. How to Learn Vocabulary&lt;/h3&gt;

&lt;p&gt;你们已经知道相对于语法和发音，我更强调词汇。想流利地使用一门外语，我们需要5000个词汇，如果你每天学10个，大概需要一年半。但绝大多数人不可能保持这样的节奏；另一个问题是，随着词汇量的增加，前面学的词汇会被忘掉，忘记的速度甚至跟你学新词汇的速度一样。应对这种情况有几种策略。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Urgency - 紧迫感&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;在情绪伴随下的学习往往有很好的记忆效果，比如在一些紧急情况下。一个好的方法是创造出这种紧迫感，来帮助自己的记忆。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Don’t just repeat - 不要单纯的重复&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;好的词汇学习策略是’刺激 + 回应’，在特定情境中通过表达来唤起词汇记忆，这种方法优于重复背诵。但重复的方法也不是一无是处，比如重复练习可以改善发音。&lt;/p&gt;

&lt;p&gt;If the key to learning is not repetition, what is it? Earlier, I said it was novelty. Now I want to explain how novelty is achieved through randomization.&lt;/p&gt;

&lt;p&gt;如果学习的关键不是重复，那是什么？ 之前我说过，是新奇感。现在我想阐释一下如何通过随机化来制造新奇感。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Randomization - 随机化&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;通常我们是从字母A学到Z, 从1，2，3开始学到100， 从星期一学到星期天，并且不断按顺序重复学习过的内容。&lt;/p&gt;

&lt;p&gt;However, some things should be learned out of order-or, more precisely, in random order. Because that is how we encounter them in life.&lt;/p&gt;

&lt;p&gt;但有些事情应该不按顺序学习–或者更精确的表述是，按随机的顺序。因为在实际生活中，我们就是随机遇到他们的。&lt;/p&gt;

&lt;p&gt;Most important is to avoid the “serial order effect”-the cumbersome business of mentally flipping through a whole list till you get to the item you need.&lt;/p&gt;

&lt;p&gt;这么做的最重要原因是避免’顺序效应’–当我们想拿到清单中间某个单项时，需要从头部开始查询，直到查到需要的那个。比如你想说 six 的时候，你要回忆完 one two three four five 才能想起 six 怎么说。&lt;/p&gt;

&lt;p&gt;Knowledge is best when it is free-floating in the mind, available to be recalled at any time, in any order. Learning a list by rote may be a first step-it enables you to drill while walking down the street. But rote practice gives only the illusion of learning, since it does not lead to random command. Practice in random order, though it may appear to take longer, actually economizes time in the long run and provides the most dependable recall. It has been shown that five repetitions randomly spaced have more effect on long-term retention than several times that many done by rote.&lt;/p&gt;

&lt;p&gt;知识在脑中最好是自由浮动的，能够在任何时候按任何顺序提取。顺序清单式地死记硬背也许可以在起步阶段使用，这种方式可以让你在散布的时候也能练习。但死记硬背会给你学习的错觉，因为它无法达成随机掌握的结果。使用随机顺序学习，虽然表面上看会花费更多时间，但从长期来看能提供更好的记忆。5次随机间隔时间的重复相比短时间重复多次的重复从长期来看具有更高的记忆留存率。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Use flash card - 使用闪卡&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;也就是将词汇写在卡片上，洗乱背诵。可以将单词难易度或者熟悉程度分级，多重复那些更难的和不熟悉的，慢慢地这些会被归入容易的和熟悉的。&lt;/p&gt;

&lt;p&gt;另一个要点是卡上可以写短语或一些表达而不仅仅是单词，虽然他们由多个词汇构成，但时间长了，次数多了，大脑会自动将其编码为一个意义单元。以短语和表达作为记忆单元的另一个好处是你可以直接拿他们来用，并且在这些表达基础上进行局部替换，得到其他类似的表达。你可以按照你的需求来为特定应用场景设计自己的卡片，或者针对某些语法点。卡片设计越有趣，你越容易记住。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Vary the English side - 多样化母语解释&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;通常我们背诵的形式是这样的：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;夜晚 -- night
白天 -- day
快乐的 -- happy
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这样一边是母语，一边是外语，但这不应该是flash card的制作形式。有两个原因&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;这种背诵方式让你每次在想’night’这个词的时候，都需要先想到母语中的’晚上’&lt;/li&gt;
  &lt;li&gt;你没有在不同情境中练习 ‘night’ 的使用&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;因此flash card应该是这样的：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;我晚上从来不出门 -- I never go out at night.
晚安 -- Good night.
我昨晚睡得很差 -- I slept badly last night.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;将这些卡片打乱学习，一旦你可以用’英语思维’调用’night’，那么你就在特定语境中对 ‘night’ 有了更丰富的理解。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Program your memory - 编码你的记忆&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;很多老师在教给学生一个表达之后会警告学生，你必须记住这个表达，在接下来的一段时间里你要想方设法地使用这个表达，以防止忘记。&lt;/p&gt;

&lt;p&gt;I maintain that a student’s memory is largely the teacher’s responsibility. This is a novel notion, for most people believe that memory is a private matter and that if a person forgets what he has learned it is no one’s fault but his own. I will explain what I mean.&lt;/p&gt;

&lt;p&gt;但我坚持认为，维持学生的记忆的职责大部分应该属于老师。这是一个奇特的观念，对大多数人来说，记忆是只与个人相关的，如果一个人忘掉了他所学到的只是他只能怪自己。&lt;/p&gt;

&lt;p&gt;There is a program, which I call “graduated interval recall.” Here is how it works.&lt;/p&gt;

&lt;p&gt;我给出的方法是’渐进式间隔记忆’。让我们模拟一个情景，当你新学习了一个单词比如’simultaneously’, 尝试重复几次之后，你现在能记住他了，接着你转而做其他事去了，5分钟后回来你试图回忆这个单词，你发现你完全记不得了，这时你便会觉得沮丧和失望。但这样记忆你大概不需要5分钟，可能1分钟之后你就忘记了。但如果在你第一次记住之后的5秒后，你回顾(回忆)一次这个单词，然后在30秒的时候再回顾一次，你很可能就能让他在你的记忆中留存更长时间。通过这样安排学习过程，可以让你用最少的时间花费达到最大记忆留存时间。&lt;/p&gt;

&lt;p&gt;这里的模式是逐渐拉长复习的间隔，直至你完全记住了这个单词，这个过程可以用一个图标示意。&lt;/p&gt;

&lt;p&gt;Graduated Interval Recall Schedule&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://s3-ap-southeast-1.amazonaws.com/image-for-articles/image-bucket-1/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7+2018-07-24+%E4%B8%8B%E5%8D%883.03.44.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Follow the natural frequencies - 跟随自然的频率&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;One of the quickest and surest ways to pick up foreign vocabulary is through reading. There is a richness of association in reading, which aids the memory, and “organic” learning is facilitated by the natural progression of word frequencies.&lt;/p&gt;

&lt;p&gt;增加和记忆外语词汇最好的、最确信的方法是通过阅读。阅读过程中存在丰富的联系性，这能帮助记忆，并且词汇的自然出现频率有助于提高学习的’有机’程度。&lt;/p&gt;

&lt;p&gt;As you read, the words you notice first are automatically the most frequent, most useful words: they appear most often. These are the words to learn first, skipping over other, less frequent words for the moment.&lt;/p&gt;

&lt;p&gt;随着阅读，你会自然注意到那些经常出现的单词，这些就是你应该先记住的单词，而其他的可以暂时忽略。当你觉得一个之前你跳过的词好像出现的次数也多起来了，而你也觉得避不开它了，那么这时你就应该将它纳入你的计划。&lt;/p&gt;

&lt;p&gt;有时你会觉得在阅读过程中频繁地查单词会很烦，尤其是读地正尽兴的时候，这种时刻你可以将这种情绪转化为动力，努力记住你正在查的单词，尽量不要忘记他，这样你下次再遇到的时候不用再重复查一次。&lt;/p&gt;

&lt;p&gt;阅读是一种很好的增加词汇的方法，这个过程本身也是一种奖励，尤其当你阅读你喜欢的作者的作品时。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Passing the hump - 越过山丘&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Let us take a hypothetical foreign person learning to read English. 设想我们有一个假想的外国人在学习用英文阅读。如果按照我之前推荐的按照出现频率高低的优先级来学习词汇，那么学会100个词汇之后，那么普通英语文章中有50%的词汇对于他来说都是熟悉的了。&lt;/p&gt;

&lt;p&gt;让我们看看上一段中开头的’Let us take …’ 这个句子。这个句子中总共有11个单词，其中的5个(us, take, a, to read)在最常出现的200词当中。 有3个（let, person, English）大概可以排在500个最常出现的词中，有2个(learning, foreign) 可以排在前2000个里面。只有一个单词 hypothetical 是一个很少出现的词。在一个词频分析研究中，这个词只在500万个单词中出现了1次。&lt;/p&gt;

&lt;p&gt;这种词汇量与熟悉单词占比的关系大概如下：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;100  -- 50%
500  -- 67%
1000  -- 75%
3000  -- 85%
5000  -- 98%
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;但要注意&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;75%&lt;/code&gt;熟悉词汇不代表你可以完全理解所有英文文本中的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;75%&lt;/code&gt;， 而是说通常情况下有大部分单词是你熟悉的，你仍然不能完全理解你读到的每一个句子，你仍然需要查单词，只不过随着词汇量增加，你查词的频率会下降。&lt;/p&gt;

&lt;p&gt;However, our hypothetical foreigner will clearly not be reading fluently as long as he still must look up every fourth or fifth word he meets. Reading will not cease being drudgery until he can read at least a few sentences without reaching for a dictionary. What we want to know is when this crossover point, this “hump,” may be reached.&lt;/p&gt;

&lt;p&gt;‘假想的外国人’熟悉50%的词，那么他平均也会读几个词查一下字典。他的阅读过程只有在当他连读几个句子才用查一次字典时，才会变得不那么痛苦。他需要坚定的是，这样一个’越过山丘’的时刻是迟早会到来的。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Guessability - 可猜测性&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;当你积累了一定量的单词和有一定关于词汇的一般知识后，有些陌生单词的意思是可以才猜出来的，比如你学过 leader 会后遇到 leadership， 知道 occupy 之后遇到 occupation， 等。这也是词汇学习中的一个山丘，不同语言的可猜测性可能会有所不同。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Passing the “Hump” in German - 越过德语的山丘&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;德语的一个特点是，它的所有词汇都由少量的基本词汇构成，所有德国人在高中毕业时就掌握了所有这些基本词汇。基本词汇之外的新词的可猜测性变得很高。这使得德语中的山丘来得很早，当你学会1000个词的时候就覆盖到了80%，2000时就能覆盖到90%。&lt;/p&gt;

&lt;p&gt;但熟悉90%的词汇对于阅读来说也并不是太流畅，因为平均而言你读9个词就要查一个词。真正使得德语相对容易的是当你努力学好那些基础词汇后，其他的词都’很好猜’, 而且不容易猜错。德语学习的山丘大概在500-2000词之间，而这些词中很多词都与英语有些类似，这也能降低学习难度。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Passing the “Hump” in French - 越过法语的山丘&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;之前提过英语母语的人可以在没学过法语的情况下猜对大概30%的法语词汇。与学习德语不同，对于英文母语者来说，掌握法语词汇的数量与他能猜对的法语词汇的关系在5000词之前呈现线性增加状态。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;掌握的法语词汇 ------------ 能猜对的法语词汇比例

500      ------------     35%
1000     ------------     50%
2000     ------------     60%
3000     ------------     70%
4000     ------------     75%
5000     ------------     80%
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;即使你能猜对80%的词汇，你也丢不掉字典，但你可以通过语境猜出一部分，而一些花卉和浆果名称你可以不需要查，整个阅读过程还是相对顺畅。&lt;/p&gt;

&lt;p&gt;These patterns of German and French vocabulary point to certain general conclusions about learning vocabulary in the Teutonic and Romance languages: (1) Learn the commonest words first because they will accelerate your guessing power; (2) begin reading as soon as you have learned five hundred to a thousand common words; (3) pick reading material that interests you strongly and continue to learn words following the natural frequencies.&lt;/p&gt;

&lt;p&gt;这些德语和法语词汇的学习模式可以得出一个关于日耳曼语系和罗曼语系语言的一般结论：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;首先学习那些最常见的词汇快速增加你猜词意的能力&lt;/li&gt;
  &lt;li&gt;当你学习500-2000个最常用的词之后，应该马上开始阅读外文&lt;/li&gt;
  &lt;li&gt;选择那些你最感兴趣的阅读材料，并在这个过程中持续增加自己的词汇量&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;按照这种方式学习，在6个月之内你可以达到较好的外文阅读能力，这对你口语和写作的提高很有帮助。&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;h3 id=&quot;11-beyond-the-spoken-word&quot;&gt;11. Beyond the Spoken Word&lt;/h3&gt;

&lt;p&gt;The Silent Language - 无声的语言&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Never talk to a Chinese businessman with your hands on your hips. He will think you are angry at him.&lt;/li&gt;
  &lt;li&gt;When sitting with Moslems, do not extend the soles of your feet (or shoes) in the direction of others. It is very impolite.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Latin Americans like to talk up close, about a foot from nose to nose, while any distance less than two feet makes a North American think he is about to be kissed. When talking to a Latin American, you may find yourself back-pedaling across the room, with him in pursuit.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;和一个中国商人谈话时不要叉腰，不然对方会认为你在生气&lt;/li&gt;
  &lt;li&gt;和穆斯林坐在一起的时候，不要把你的脚尖朝向任何一个人，这样是对他们来说是很无礼的&lt;/li&gt;
  &lt;li&gt;拉丁美洲人说话的时候喜欢杵地很近，大概鼻子相距一脚距离，而对北美人来说小于两脚的距离都会让对方觉得你要亲他。当一个拉丁美洲人和一个北美人对话时，会出现一方不断后退，一方不断压上的画面。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;对于一个国家或地域来说，除了语言之外还有很多’无声的语言’，即本地的传统，惯例，习俗，信仰等，这是除语言之外需要学习的东西。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Role-playing - 角色扮演&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;语言学习过程中，我们是在母语的心理背景下学习另一门语言，这种情况会形成限制，如果我们能假想自己是一个外国人，正身处国外，有自己的国外生活经历，像国外人那样穿着，行为，总之尽可能地模拟出一种你是外国人的情景，会对你的语言学习有巨大帮助。但这么做的风险是你可能会显得很傻，但这样的风险是值得的，只有这样你才能放下心理上的防备，更好的学习这门语言和他们的文化。&lt;/p&gt;

&lt;p&gt;Psychologist Carl Rogers, in his inspiring book Freedom to Learn, says, “I find that one of the best, but most difficult, ways for me to learn is to drop my own defensiveness, at least temporarily, and to try to understand the way in which his experience seems and feels to the other person.” The willingness to risk dropping one’s own identity may be the crucial factor that enables certain people to learn a foreign language like a native.&lt;/p&gt;

&lt;p&gt;心理学家 Carl Rogers 在他充满启发的书《Freedom to Learn》 中写到 “我发现在我自己的学习过程中最难的，也是最好的学习策略就是放下防备心理，并以学习对象的视角来思考和感受，即使只是暂时这么做。” 冒着风险放下自己的身份可能是语言学习过程中让你达到本土水平的最关键因素。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Handling embarrassing moments - 化解尴尬时刻&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;在希腊遇到的尴尬时刻：去报停买报纸，问过对方有没有想要的刊物后，对方点头了，但没后后续行动；去租公寓遇到大楼管理员也是同样的情况，点头了，但是没有后续行动；一天之内遇到三次这样的情况。最后才知道在希腊，点头是 ‘No’ 的意思。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Keep quiet - 保持安静&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Keep talking - 保持谈话&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Take it on the chin - 无怨无悔地承受&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;以上三条： 学习什么时候应该保持安静，什么时候应该保持对话。在国外（其实你在自己国家也一样）肯定难免会遇到尴尬时刻，自然接受就好。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Keeping the Waitress Waiting - 让服务员等待&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;讲述一对夫妻出国由于迫于怕让餐厅服务员等太久的压力，每次都在没搞清菜单前匆匆点餐的的故事。告诉我们出国时作为外国人，感到压力和弱势是自然的倾向，但不论你外语说得多烂，也要保持镇定与风度。学会说 “I’m not ready to order yet” 或者 “Come back in five minutes” 这一类的词，不要屈从于尴尬或难堪的感觉，即使你只是一个结巴的外国人。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Picking up clues - 寻找学习的线索&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;在使用外语时，很多错误是有线索可循的，比如对话参与者对你正常的说话内容发笑，或者表现出疑惑的表情等，这些告诉你你可能犯了某些错误。不要害羞，留心这些线索，并寻求适当的帮助，这类错误的数量终究是有限的，我们是能够逐渐纠正他们的。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Getting to know you - 认识自己&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;One reason, perhaps the biggest, why people travel to foreign countries is that they want to understand themselves better though understanding others. We may find out who we are and how we got to be that way by observing people who have been molded differently by another environment. The contract is sharpest where the country’s social and political system departs most from our own. For many Americans, this is the fascination of a trip to Russia.&lt;/p&gt;

&lt;p&gt;也许人们醉心于出国旅行的一个原因是为了通过了解他人来更好的了解自己。通过观察被完全不同的环境所塑造出来的人，我们也许能发现我们是谁，以及为什么我们会是现在这个样子。尤其当那个国家的社会和政治系统和你的国家有着巨大差异时这种对比效果会十分明显。对于许多美国人来说，这也许是为什么他们那么喜欢去俄罗斯旅行的原因。&lt;/p&gt;

&lt;p&gt;多数情况下我们的出国之旅应该尝试保持谦恭，但这种一贯的态度不一定在所有国家都好使。作者举了一个人到俄罗斯旅行被多次粗鲁拒绝后决定回击的例子，当这个旅客被再次被无理拒绝时，他使用了强硬的回应态度，虽然他的俄语并不流畅，但它借助自己的语气，表情和身体语言表达了自己的愤怒，随着他态度的转变，他没有再在粗鲁的回答面前低头，办成了之前一直无法顺利办成的事。&lt;/p&gt;

&lt;p&gt;这告诉我们并没有一个通用的原则或者态度能应对所有情况，各地文化、社会、政治情况、习俗都不同，甚至在同一个国家的不同区域都是不同的，更实际地说就算在同一个城市里也会遇到行事风格迥异的人。因此”永远保持友好谦恭” 并不是一条通用准则，但这并不是鼓励莽撞和强势的言行，我们应该视情况调整自己的策略。&lt;/p&gt;</content><author><name>Xullnn</name></author><category term="Life" /><category term="language" /><category term="how to learn" /><category term="reading notes" /><summary type="html">一本关于如何学习外语的书籍的翻译摘抄以及笔记。</summary></entry><entry><title type="html">Treat your own neck</title><link href="http://localhost:4000/life/treat-your-own-neck/" rel="alternate" type="text/html" title="Treat your own neck" /><published>2018-06-26T00:00:00+08:00</published><updated>2018-06-26T00:00:00+08:00</updated><id>http://localhost:4000/life/treat-your-own-neck</id><content type="html" xml:base="http://localhost:4000/life/treat-your-own-neck/">&lt;p&gt;如书名所述，一本关于如何自我治疗颈椎的书。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://s3-ap-southeast-1.amazonaws.com/image-for-articles/image-bucket-1/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7+2018-06-28+%E4%B8%8B%E5%8D%882.34.09.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;原书链接：&lt;/p&gt;

&lt;p&gt;https://www.amazon.com/Treat-Your-Own-Neck-803-5/dp/0987650416/ref=sr_1_1?ie=UTF8&amp;amp;qid=1530167444&amp;amp;sr=8-1&amp;amp;keywords=treat+your+own+neck&lt;/p&gt;

&lt;p&gt;kindle 版:&lt;/p&gt;

&lt;p&gt;https://www.amazon.com/Treat-Your-Neck-Robin-McKenzie-ebook/dp/B00UM2O5RU/ref=sr_1_2?ie=UTF8&amp;amp;qid=1530171708&amp;amp;sr=8-2&amp;amp;keywords=treat+your+own+neck&lt;/p&gt;

&lt;p&gt;作者：Robin McKenzie&lt;/p&gt;

&lt;p&gt;https://en.wikipedia.org/wiki/McKenzie_method&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;introduction-a-chance-discovery&quot;&gt;Introduction: A Chance Discovery&lt;/h3&gt;

&lt;p&gt;一次偶然的事件让Robin开始发展他的物理疗法。有一个腰部疼痛，经多种治疗后无效的病人(Mr. Smith)来到他的工作室， Robin 让他先去治疗室然后趴在理疗床上，但之前的一个患者治疗时将床的前部升高，后来忘了还原。Smith 听从了 Robin 的吩咐趴在了这个前半部升高的床上，5分钟后 Robin 回来看到了这个奇怪的姿势，才意识到是刚才忘了将床复原。但 Smith 此时告诉他，这是他有史以来体验最好的治疗，他感觉自己的症状减轻了很多。&lt;/p&gt;

&lt;p&gt;此后Robin便开始不断尝试，研究，拓展这种治疗方法，现在这种方法已经发展成一套完整的物理疗法，帮助病人治疗脊柱相关的疾病。&lt;/p&gt;

&lt;h3 id=&quot;chapter-1-the-neck-or-cervical-spine&quot;&gt;Chapter 1: The neck or cervical spine&lt;/h3&gt;

&lt;p&gt;颈部或颈椎相关的疾病有很多种类型，引发的症状也不同，表现出来不一定只是颈部的不适，可能延伸到很多身体部位。有些长期的病痛是会明显影响病人一生的。&lt;/p&gt;

&lt;p&gt;“The pain simply makes their lives miserable and they have to reduce their activities in order to keep the discomfort at a moderate level. Neck problems can thus affect our lifestyle.”&lt;/p&gt;

&lt;p&gt;很多科室医生给出的治疗方案，比如服用肌肉镇痛或松弛药剂，针灸，按摩，加热等的确可以在短期内缓解症状，但他们都不能消除症状在未来再次出现的可能。&lt;/p&gt;

&lt;p&gt;“Whatever the situation, you most likely realise that many of the treatments dispensed by doctors, physiotherapists and chiropractors are prescribed for your present symptoms and are not directed at preventing future problems.”&lt;/p&gt;

&lt;p&gt;而这本书的主要观点之一是对颈部的管理是你自己的职责。从长期来看，自我治疗能更好的缓解和管理你的颈部不适。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;哪些人群适合自我治疗&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;书中提出，在你进行书中提到的练习时，应该密切关注自己疼痛模式的变化，任何不确定的情况都最好向专业医生寻求帮助。&lt;/p&gt;

&lt;p&gt;“Once you have started the exercises, carefully watch your pain pattern.”&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;如果有以下描述的症状，那么在咨询专业医师之前，不要自己开始练习流程。&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;腕部、手部，或手指感到刺痛或麻木。&lt;/li&gt;
  &lt;li&gt;颈部疼痛是由最近的某次物理事故引发的。&lt;/li&gt;
  &lt;li&gt;你最近开始头痛，这种情况你应该先去检查你的眼部情况或佩戴的眼镜的情况。&lt;/li&gt;
  &lt;li&gt;你正经历不明原因的头部剧痛，并且在不断加重。&lt;/li&gt;
  &lt;li&gt;你偶尔会有伴随恶心和头晕的头痛。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这本书描述了一套完整的管理系统，你必须完全遵循要求来保障最后的效果。&lt;/p&gt;

&lt;p&gt;不要直接跳到后面的练习章节，你必须先理解前面几章中的内容。&lt;/p&gt;

&lt;p&gt;“Do not turn straight to the exercise description pages; your understanding of the preceding chapters is essential.
”&lt;/p&gt;

&lt;h3 id=&quot;chapter-2-understanding-the-spine---理解脊柱&quot;&gt;Chapter 2: Understanding the Spine - 理解脊柱&lt;/h3&gt;

&lt;h4 id=&quot;21-vertebra-and-the-spine&quot;&gt;2.1 Vertebra and the spine&lt;/h4&gt;

&lt;p&gt;vertebra（椎骨；脊椎）指的是构成整个脊柱中的一个小节段&lt;/p&gt;

&lt;p&gt;each of the series of small bones forming the backbone, having several projections for articulation and muscle attachment, and a hole through which the spinal cord passes&lt;/p&gt;

&lt;p&gt;spine(脊柱)指的则是所有脊椎串起来构成的整个柱形结构&lt;/p&gt;

&lt;p&gt;a series of vertebrae extending from the skull to the small of the back, enclosing the spinal cord and providing support for the thorax and abdomen; the backbone&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://s3-ap-southeast-1.amazonaws.com/image-for-articles/image-bucket-1/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7+2018-06-26+%E4%B8%8B%E5%8D%881.53.42.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;脊柱的颈部区域包含了7个骨头。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://s3-ap-southeast-1.amazonaws.com/image-for-articles/image-bucket-1/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7+2018-06-26+%E4%B8%8B%E5%8D%881.53.54.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;每一块脊椎的前部是坚硬的骨质，后部带有一个环装孔，多块颈椎相连时这些孔装结构就会形成一个管状的腔体，叫做 spinal canal（椎管，脊管，髓管），椎管为脊髓提供保护和支撑，脊髓从脑补一直延伸至盆骨。&lt;/p&gt;

&lt;p&gt;脊椎之间的部分是一种特殊的软骨组织，叫椎间盘，这些软骨结构就在脊髓前部，脊椎之间。&lt;/p&gt;

&lt;p&gt;各个脊椎和椎间盘通过一些列的关节连接，并最终构成整个颈椎。每个关节被软组织包裹 — 包括由韧带加固的关节囊。再之上的肌肉可以向上延伸至头骨或者向下延伸至躯干。肌肉的两端都以肌腱收尾并附着在骨骼上，因此肌肉的收缩就可以带动骨骼和关节的运动让人做出各种动作。&lt;/p&gt;

&lt;h4 id=&quot;22-functions-of-the-cervical-spine&quot;&gt;2.2 Functions of the cervical spine&lt;/h4&gt;

&lt;p&gt;颈部具有高度的灵活性和特殊的关节构造，这让我们可以向各个方向转动头部，但也让颈部变得脆弱而容易受损。颈椎的主要功能就是为头部提供支撑，并且保护由脑部延伸出的脊髓。&lt;/p&gt;

&lt;h4 id=&quot;23-natural-posture&quot;&gt;2.3 Natural posture&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;https://s3-ap-southeast-1.amazonaws.com/image-for-articles/image-bucket-1/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7+2018-06-26+%E4%B8%8B%E5%8D%882.39.36.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;正常且自然的站立姿势中，可以看到后颈部会有一个向内的曲线，这叫 cervical lordosis(颈椎曲度)。这个部位就是本书中主要关注的部位。&lt;/p&gt;

&lt;p&gt;“ It is this curve in the spine that mainly concerns us in this book.”&lt;/p&gt;

&lt;p&gt;站立时，我们的头部应该在肩带的正上方，这会自然产生出颈椎曲度。但长期不注意姿势的人的头部会伸向前方，颈椎曲度会变形。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://s3-ap-southeast-1.amazonaws.com/image-for-articles/image-bucket-1/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7+2018-06-26+%E4%B8%8B%E5%8D%882.39.45.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这种姿势叫 protruded head 头部前伸。&lt;/p&gt;

&lt;h4 id=&quot;23-mechanical-pain&quot;&gt;2.3 Mechanical pain&lt;/h4&gt;

&lt;p&gt;物理原因引起的疼痛。这类疼痛的原因是两个骨头之间的关节处于过度拉伸状态时，其周围的韧带和软组织也会处于过度拉伸状态，这当然也包括了脊柱上的各个关节。有些过度拉伸的状况可能是即时出现的，比如指关节等，但有些关节处过度拉伸引起的疼痛则可能在数小时之后才出现。&lt;/p&gt;

&lt;p&gt;刚开始这种过度拉伸引起的损伤可能经过简单的矫正可以很快恢复，但如果是长期积累的变形，比如颈部的变形，则会需要长期的努力。&lt;/p&gt;

&lt;h4 id=&quot;24-mechanical-neck-pain&quot;&gt;2.4 Mechanical neck pain&lt;/h4&gt;

&lt;p&gt;“ Whenever we remain in a relaxed position, whether standing, sitting or lying, prolonged overstretching can easily occur.
”&lt;/p&gt;

&lt;p&gt;任何时候你保持一个放松状态时，不管是站着坐着还是躺着，过度伸展的情况都容易出现。这类过度伸展多是由我们自己造成的，这也是为什么说自我治疗是我们自己职责所在的原因。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tissue damage 组织损伤&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;“It is often thought that neck pain is caused by strained muscles. This is not the case. Muscles, which are the source of power and cause movement, can be overstretched but usually heal rapidly and seldom cause pain lasting for more than a week or two. However, underlying soft tissues that provide support for spinal joints such as capsules and ligaments are readily injured from overstretching. In fact, usually these are damaged long before the muscles. Thus, the real problem lies in and about the affected joint.&lt;/p&gt;

&lt;p&gt;我们常认为颈部疼痛是由紧绷的肌肉造成的。但情况并非如此。肌肉作为力量和动作的来源，可以被过度拉伸并快速修复，很少引发超过一两周的持续疼痛。反而是给脊柱关节提供支持的关节囊和韧带容易在过度拉伸中受损。事实上这些部位的损伤远早于肌肉损伤。由此可知真正的问在于相关联的关节。&lt;/p&gt;

&lt;p&gt;这些软组织在修复过程中可能生成疤痕组织，变得不那么灵活，并且会缩短。在这种情况下可能正常的动作都可能导致前面提到的过度拉伸，并导致疼痛。除非我们能通过渐进式地伸展练习来恢复这些组织的正常韧性，否则就可能导致长期的颈部疼痛或头痛。&lt;/p&gt;

&lt;h4 id=&quot;25-疼痛部位&quot;&gt;2.5 疼痛部位&lt;/h4&gt;

&lt;p&gt;看图，对号，入座&lt;/p&gt;

&lt;p&gt;The sites of pain caused by neck problems vary from one person to another:
In a first attack, pain is usually felt:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;at or near the base of the neck, in the centre (Figure 1), or&lt;/li&gt;
  &lt;li&gt;just to one side (Figure 2).
Usually these pains subside within a few days.
In subsequent attacks pain may:&lt;/li&gt;
  &lt;li&gt;reach across both shoulders (Figure 3)&lt;/li&gt;
  &lt;li&gt;to the top of one shoulder or the shoulder blade (Figure 4), and&lt;/li&gt;
  &lt;li&gt;later still to the outside or back of the upper arm as far as the elbow (Figure 5), or&lt;/li&gt;
  &lt;li&gt;it may extend below the elbow to the wrist or hand, and pins and needles or numbness may be felt in the fingers (Figure 6)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://s3-ap-southeast-1.amazonaws.com/image-for-articles/image-bucket-1/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7+2018-06-26+%E4%B8%8B%E5%8D%883.05.26.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Some people experience headaches as a result of neck problems. Often headaches are felt:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;at the top of the neck and the base and the back of the head, on one or both sides (Figure 7)&lt;/li&gt;
  &lt;li&gt;extending from the base of the back of the head to just below the crown of the head (Figure 8 – occipital headache)&lt;/li&gt;
  &lt;li&gt;spreading from the back of the head over the top of the head to above or behind the eye, again on one or both sides (Figure 9 – total headache)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;distributed across the forehead and often felt behind the eyes (Figure 10  frontal headache)  分布于前额以及眼底！&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;distributed around the head, often described as feeling like a “tight band” (Figure 11 – circumferential headache).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://s3-ap-southeast-1.amazonaws.com/image-for-articles/image-bucket-1/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7+2018-06-26+%E4%B8%8B%E5%8D%883.08.00.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;chapter-3-common-causes-of-neck-pain---引起颈部疼痛的常见诱因&quot;&gt;Chapter 3: Common Causes of Neck Pain - 引起颈部疼痛的常见诱因&lt;/h3&gt;

&lt;h4 id=&quot;31-postural-stresses&quot;&gt;3.1 Postural stresses&lt;/h4&gt;

&lt;p&gt;“The most common form of neck pain is caused by overstretching of ligaments due to postural stresses. ”&lt;/p&gt;

&lt;p&gt;最常见的原因是由于不良姿势导致的韧带过度拉伸。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://s3-ap-southeast-1.amazonaws.com/image-for-articles/image-bucket-1/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7+2018-06-27+%E4%B8%8B%E5%8D%884.24.10.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://s3-ap-southeast-1.amazonaws.com/image-for-articles/image-bucket-1/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7+2018-06-27+%E4%B8%8B%E5%8D%884.24.33.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://s3-ap-southeast-1.amazonaws.com/image-for-articles/image-bucket-1/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7+2018-06-27+%E4%B8%8B%E5%8D%884.24.38.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;仔细观察这些动作会发现cervical lordosis 颈椎曲度消失了。&lt;/p&gt;

&lt;p&gt;所有这些错误的姿势中，坐着时头部前伸是最常见的错误。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://s3-ap-southeast-1.amazonaws.com/image-for-articles/image-bucket-1/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7+2018-06-27+%E4%B8%8B%E5%8D%884.24.53.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;不幸的是我们太多人在工作或闲暇时处于头部前伸的姿势，整个失去了颈椎曲度。当这种姿势保持的时间过长且从来没得到过恢复，那么由多块颈椎构成的椎管将会逐渐消失。如果这种习惯是在小时候就形成了，那么长期下来会造成关节结构和形状的改变，导致更严重的磨损，逐渐失去关节的灵活性。最终这种不良姿势会造成严重的伤害。&lt;/p&gt;

&lt;h4 id=&quot;32-sitting-for-prolonged-periods&quot;&gt;3.2 Sitting for prolonged periods&lt;/h4&gt;

&lt;p&gt;当我们轻快地直立行走时，头部很好地受到脊柱的支撑，因此自然地处于收回状态。但当我们累了坐下时，就很容易处于头部前伸的姿势，因为支撑头部的相关肌肉逐渐感到疲劳。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://s3-ap-southeast-1.amazonaws.com/image-for-articles/image-bucket-1/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7+2018-06-27+%E4%B8%8B%E5%8D%884.34.46.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这种姿势我们可以在很多地方看到，婴儿时期并不存在这种姿势，它多是由青少年阶段逐渐形成。我们的身体并不是天生设计来每周6天，每天坐6到8小时的。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://s3-ap-southeast-1.amazonaws.com/image-for-articles/image-bucket-1/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7+2018-06-27+%E4%B8%8B%E5%8D%884.34.53.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;处于坐立姿势时，后腰的姿势会强烈影响颈部的姿势。如果后腰处于懒散的姿势，那么就很难保持头部收回。当我们坐下后几分钟我们很容易弯腰，并不自觉地将头伸向前面。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Environment factors - 环境因素&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;这里的环境因素主要指的是交通工具，商业场所或家里的座位设计多会导致不良的姿势。由于多数设计没有将姿势作为重点，我们常被强制地改变为不良坐姿。当我们坐车，火车或飞机等交通工具时，常常被强制按照座位提供的外形调整自己的坐姿。当腰部得不到很好支撑时，问题就很容易出现。&lt;/p&gt;

&lt;p&gt;虽然硬件条件是导致不良坐姿的关键因素，但好的一点是当我们知道正确的坐姿应该是什么样，并且知道如何主动调整后，那么硬件对我们的影响就不会那么大了。&lt;/p&gt;

&lt;h4 id=&quot;33-如何管理长时间坐立的情景&quot;&gt;3.3 如何管理长时间坐立的情景&lt;/h4&gt;

&lt;p&gt;两个大原则&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;保持正确的坐姿&lt;/li&gt;
  &lt;li&gt;时常检查纠正低头或头部前伸的姿势&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;为了治疗长期不良姿势带来的颈部不适，我们需要额外的练习，这会在后面提到。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;纠正坐姿&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;或许你已经用懒散的姿势坐了很多年但并没有出现腰部或颈部的不适，但一旦你出现问题，你应该立即纠正你的姿势，因为这些姿势会不断固化问题。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://s3-ap-southeast-1.amazonaws.com/image-for-articles/image-bucket-1/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7+2018-06-27+%E4%B8%8B%E5%8D%884.40.39.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如果你弯着腰坐，那么是不可能纠正你颈部姿势的。因此首先要纠正你腰部的姿势。&lt;/p&gt;

&lt;p&gt;注意你站立时，腰部与垂直里面形成的自然中空，在坐立时你也应该保持它。为了帮助你保持腰部的中空， 你可以使用一个腰部支撑枕。这个圆枕在被挤压前的直径在 12.5–15 厘米左右。没有这类腰部支撑，一旦我们坐了一段时间后或专注于工作内容时，头部很容易就伸向了前方，比如谈话，阅读，写作，使用电脑，看电视，开车时。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://s3-ap-southeast-1.amazonaws.com/image-for-articles/image-bucket-1/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7+2018-06-27+%E4%B8%8B%E5%8D%884.38.43.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;为了纠正头部前伸的姿势，你首先要练习后面提到的 练习1，坐立时的头部撤回。在做这些练习时要确保每次动作都达到了最大程度的拉伸。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://s3-ap-southeast-1.amazonaws.com/image-for-articles/image-bucket-1/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7+2018-06-27+%E4%B8%8B%E5%8D%884.42.24.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Correct head posture&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;当你最大限度的收回头部，此时的姿势叫做 retracted head posture，也就是头部收回姿势。这个姿势是你做到极限时的状态，这个动作会很费力，我们不可能长时间保持这个姿势，正常坐立时，我们需要一个可以长时间保持的正确姿势。&lt;/p&gt;

&lt;p&gt;这个姿势即从极限状态，往前放松大约10%的幅度。这样你就可以长时间保持一个正确的姿势，不过这大概需要你花费8天的时间来完全掌握。&lt;/p&gt;

&lt;p&gt;这里的关键是，通过正确的方法找到正确的姿势，并长时间保持。开始的几周你可能仍然感到不适，但逐渐地，不适感会完全消失。&lt;/p&gt;

&lt;p&gt;在你刚开始纠正自己的姿势时， 你可能会感到某些新的疼痛，这些疼痛来自与之前不同的部位。新的疼痛是由于你练习和保持正确姿势引起的，他们会在接下来的一段时间逐渐消失。正确姿势的练习需要规律的坚持，一旦你习惯于这些练习，你会注意到疼痛感和不适感会逐渐消失，你会感到越来越舒服。从此你便会开始自动选择那些能帮助你保持正确姿势的座椅。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;When sitting for prolonged periods - sit correctly, with the low back supported by a lumbar roll and the head retracted.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;对于工作内容需要久坐的人来说，不管你多么注意姿势，时间一长都不可避免地会变成头部前伸的姿势，这就需要你定时打断工作来进行 动作2 的练习（后仰，转头）。这种定时的打断是必要的，间隔大约在1小时左右。&lt;/p&gt;

&lt;h4 id=&quot;33-lying-and-resting---睡觉和休息的姿势&quot;&gt;3.3 Lying and Resting - 睡觉和休息的姿势&lt;/h4&gt;

&lt;p&gt;睡觉和休息姿势是除了坐姿外第二大引发颈部问题的原因。&lt;/p&gt;

&lt;p&gt;如果你早上起床之后感到颈部疼痛或者僵硬，那么这很可能是由你睡眠的表面或者你的睡觉姿势引起的。对于睡觉姿势，我们很难改变，最多改变入睡前的姿势，因为睡着之后我们会一直改变睡姿。因此改变睡眠介质的表面是我们的主要任务。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Correction of sleeping surface&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;对于睡眠介质表面的纠正，我们需要做的主要是改变枕头。一个好的枕头应该能同时给头部和颈部提供好的支撑。也就是能刚好填充头和肩之间的颈部轮廓形成空隙，并且不会倾斜或抬高头部。&lt;/p&gt;

&lt;p&gt;对于头部，枕头应该能形成一个碟形的凹陷，通常的枕头并不能达到这个效果。你可以换成一个较矮的羽毛枕头，这样你可以容易地改变枕头填充物的形状，调整出头部的碟形凹陷，同时形成对颈部的支撑。&lt;/p&gt;

&lt;p&gt;你可以在枕头中塞一个圆柱形的圆枕。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://s3-ap-southeast-1.amazonaws.com/image-for-articles/image-bucket-1/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7+2018-06-27+%E4%B8%8B%E5%8D%884.46.39.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;每个人需要的支撑是不同的，因此你需要自己不断试验调整来找到最合适的枕头位置和睡觉姿势。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://s3-ap-southeast-1.amazonaws.com/image-for-articles/image-bucket-1/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7+2018-06-27+%E4%B8%8B%E5%8D%884.46.48.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://s3-ap-southeast-1.amazonaws.com/image-for-articles/image-bucket-1/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7+2018-06-27+%E4%B8%8B%E5%8D%884.46.57.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Correction of the lying posture&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;对于纠正睡眠姿势，最需要注意的一点是避免趴着睡的姿势。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://s3-ap-southeast-1.amazonaws.com/image-for-articles/image-bucket-1/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7+2018-06-27+%E4%B8%8B%E5%8D%884.47.18.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;34-relaxing-after-vigorous-activity---剧烈运动后的放松姿势&quot;&gt;3.4 Relaxing after vigorous activity - 剧烈运动后的放松姿势&lt;/h4&gt;

&lt;p&gt;剧烈运动之后由于疲劳我们很容易陷入懒散的状态，比如弯腰、头部前伸的状态。&lt;/p&gt;

&lt;p&gt;“After vigorous activity, retract the head and extend the neck five or six times. If you sit down to rest, avoid the protruded head posture.”&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://s3-ap-southeast-1.amazonaws.com/image-for-articles/image-bucket-1/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7+2018-06-27+%E4%B8%8B%E5%8D%884.54.19.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;运动之后我们应该有意识地收回头部，做5到6次头部伸展，并且避免伸头的动作。&lt;/p&gt;

&lt;h4 id=&quot;35-working-awkward-positions-or-cramped-space&quot;&gt;3.5 Working awkward positions or cramped space&lt;/h4&gt;

&lt;p&gt;有些在狭小空间内的工作可能导致有害的姿势。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://s3-ap-southeast-1.amazonaws.com/image-for-articles/image-bucket-1/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7+2018-06-27+%E4%B8%8B%E5%8D%884.54.31.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When working with the head and neck in a static position, at regular intervals interrupt this position by assuming the correct posture. In addition perform five or six movements of Exercise 6, and then Exercises 1 and 2.&lt;/p&gt;

&lt;p&gt;当你无法避免这类姿势时，应该适时地进行动作6（水平头部扭转）的练习，接着做动作1（头部回撤）和动作2（仰头转动）的练习。&lt;/p&gt;

&lt;h3 id=&quot;chapter-4-understanding-the-mckenzie-method---理解麦肯齐方法&quot;&gt;Chapter 4: Understanding the McKenzie Method - 理解麦肯齐方法&lt;/h3&gt;

&lt;p&gt;Your understanding of this chapter is essential for successful self-treatment. Please read it carefully.&lt;/p&gt;

&lt;p&gt;理解这套方法是自我治疗成功的关键，因此请仔细阅读这一章。&lt;/p&gt;

&lt;h4 id=&quot;41-the-aim-of-the-exercises&quot;&gt;4.1 The aim of the exercises&lt;/h4&gt;

&lt;p&gt;练习的目的主要是为了消除疼痛，并且恢复颈部活动的灵活性。&lt;/p&gt;

&lt;p&gt;When you are exercising for pain relief, you should move to the &lt;strong&gt;edge of the pain or just into the pain&lt;/strong&gt;, then release the pressure and return to the starting position. When you are exercising for stiffness, the exercises can be made more effective by using your hands to gently but firmly and steadily apply overpressure in order to obtain the maximum amount of movement.&lt;/p&gt;

&lt;p&gt;当你是为了消除疼痛而练习时， 你做动作应该达到疼痛的边缘或者做到你感到疼痛的程度，接着再逐渐松弛恢复起始姿势。&lt;/p&gt;

&lt;p&gt;如果你是为了消除僵硬感而练习，为了达到更好的效果你应该用手来辅助用力，已达到最大的动作幅度。&lt;/p&gt;

&lt;p&gt;练习的下一步总是保持正确的姿势，一旦你的疼痛消除，你应该时刻注意保持正确的姿势来维持治疗效果。&lt;/p&gt;

&lt;h4 id=&quot;42-effect-on-pain-intensity-and-location&quot;&gt;4.2 Effect on pain intensity and location&lt;/h4&gt;

&lt;p&gt;当你做练习时，可能出现三种情况&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;练习可能会引起某些症状的消除&lt;/li&gt;
  &lt;li&gt;练习可能减轻或增强你之前体验到的疼痛程度&lt;/li&gt;
  &lt;li&gt;练习可能引发其他部位的疼痛&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在特定案例中可能出现疼痛部位首先转移，接着减轻，最后消失的情况。&lt;/p&gt;

&lt;p&gt;In order to determine whether the exercise programme is good for you, it is very important that you observe closely any changes in the location of the pain. You may notice that pain, originally felt to one side of the spine, across the shoulders or down the arm, moves towards the centre of your neck as a result of the exercises. In other words, your pain localises or centralises.&lt;/p&gt;

&lt;p&gt;为了确认这套练习是否适合你。你应该密切观察任何疼痛位置的变化。比如刚开始疼痛从你的颈部一直延伸到手臂，通过练习，疼痛逐渐向颈部收缩，最后只感到有颈部的不适，这种疼痛的中心化是一种好的迹象。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://s3-ap-southeast-1.amazonaws.com/image-for-articles/image-bucket-1/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7+2018-06-27+%E4%B8%8B%E5%8D%884.56.16.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pain intensity&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;在开始阶段你可能会感觉疼痛感比练习之前更加严重，这是一种常见的现象，随着你继续练习，这种疼痛应该快速减轻，至少是相对于之前的疼痛程度而言。一旦你的疼痛开始呈现中心化的趋势，疼痛应该会在两三天内迅速消退，接着再过两三天疼痛感应该完全消失。&lt;/p&gt;

&lt;p&gt;注意。如果疼痛模式呈现于中心化相反的趋势，也就是往更多，更远的地方延伸，你应该立即停止练习并寻求医生的帮助。&lt;/p&gt;

&lt;p&gt;正如之前提到过的，练习过程中可能出现某些地方有新的疼痛，如果这种疼痛并不严重，那么随着练习的进行，他们会自行消失。&lt;/p&gt;

&lt;p&gt;If your symptoms have been present rather continuously for many weeks or months, you should not expect to be pain-free in two to three days. The response will be slower, but, if you are doing the correct exercises, it will only be a matter of time before the pain subsides.&lt;/p&gt;

&lt;p&gt;如果你的症状已经持续了数周甚至数月，那么不要期望两三天的练习就可以消除症状。这种情况效果应该来的较慢，但是如果你坚持做正确的练习，完全治愈只是时间问题。&lt;/p&gt;

&lt;p&gt;As long as your pain is slowly improving, continue with the exercises that have led to this improvement. Do not change anything in your established routine. It may be tempting to add other exercises, but this may disrupt your progress. Wait until improvement stops before considering any other activity or exercise.&lt;/p&gt;

&lt;p&gt;随着练习的进行，如果你的症状在逐渐减轻，那么不要改变之前建立起来的练习习惯，因为这可能会导致改善的中断。如果你想要增加额外的练习动作，那么应该等待当前动作的效果达到不变的阶段时再增加。&lt;/p&gt;

&lt;h4 id=&quot;43-starting-the-exercise-programme&quot;&gt;4.3 Starting the exercise programme&lt;/h4&gt;

&lt;p&gt;通常情况下推荐以坐姿完成动作，但如果你的情况比较严重，坐立情况下的练习会产生你无法忍受的疼痛或不适感，那么你可以躺下练习。&lt;/p&gt;

&lt;p&gt;当你开始颈椎自我治疗练习程序时， 你应该停下其他一切运动，比如健身或其他运动。直到你的症状完全消失后再进行这些运动。&lt;/p&gt;

&lt;h3 id=&quot;chapter-5-the-exercise-programme&quot;&gt;Chapter 5: The Exercise Programme&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;练习的种类很少，最好是熟悉所有的练习动作，然后根据自己的情况进行组合。&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Overview：&lt;/p&gt;

&lt;p&gt;In order to treat present neck problems successfully:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;At all times: correct your posture and maintain the correct posture.&lt;/li&gt;
  &lt;li&gt;When in acute pain: if possible, perform Exercises 1 and 2; if not possible, then do Exercises 3 and 4.&lt;/li&gt;
  &lt;li&gt;When pain is more to one side and not responding: first Exercise 5, later Exercises 1 and 2.&lt;/li&gt;
  &lt;li&gt;When acute pain has subsided: Exercises 6 and 7, always followed by Exercises 1 and 2.
In order to prevent future neck problems successfully:&lt;/li&gt;
  &lt;li&gt;At all times: maintain good postural habits.&lt;/li&gt;
  &lt;li&gt;When no pain or stiffness: Exercise 6 two times per day, always followed by Exercises 1 and 2.&lt;/li&gt;
  &lt;li&gt;At first sign of recurrence: postural correction and Exercises 1 and 2 at regular intervals – that is, ten times per session and six to eight sessions per day.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;为了治愈你的颈部问题，遵循以下要求：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;在任何时间：保持正确的姿势&lt;/li&gt;
  &lt;li&gt;急性疼痛发作时：如果可能，练习动作1和动作2；如果不行，使用3和4替代&lt;/li&gt;
  &lt;li&gt;如果疼痛主要是在某一侧，且没什么好转：先练习5，然后1和2&lt;/li&gt;
  &lt;li&gt;当急性疼痛缓解时： 先练6和7，然后务必接着1和2&lt;/li&gt;
  &lt;li&gt;症状复发的第一时间： 纠正姿势，且规律练习1和2，每个动作10次，每天做6–8组&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;动作1坐姿头部回撤---head-retraction-in-sitting&quot;&gt;动作1：坐姿头部回撤 - Head retraction in sitting&lt;/h3&gt;

&lt;p&gt;这个动作主要是为了治疗颈部疼痛，也用于预防。用于治疗时每组做10次，每天重复6–8次，用于预防每天重复5–6次。当然次数也可以增加。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;找到一个直立而放松的姿势坐下，略微前伸脖子&lt;/li&gt;
  &lt;li&gt;缓慢而稳定地回撤头部，直至你能达到的最大幅度。在此过程中务必保持下巴收敛并保持平视前方（即头不要上扬或下压）。当动作达到最大限度，此时的动作即 retracted head posture 头部回撤状态&lt;/li&gt;
  &lt;li&gt;保持回撤动作数秒，然后逐渐放松，头部缓慢回到初始动作，即略微前伸状态&lt;/li&gt;
  &lt;li&gt;每次回撤都要保证动作幅度已经做到了极限位置&lt;/li&gt;
  &lt;li&gt;如果想要练习的效果更好，可以使用双手按住下巴辅助用力&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://s3-ap-southeast-1.amazonaws.com/image-for-articles/image-bucket-1/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7+2018-06-28+%E4%B8%8B%E5%8D%882.10.58.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;如果这个练习产生了让你无法忍受的疼痛，可以尝试用动作3来替代&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;动作2-坐姿颈部后仰拉伸---neck-extension-in-sitting&quot;&gt;动作2： 坐姿颈部后仰拉伸 - Neck extension in sitting&lt;/h3&gt;

&lt;p&gt;这个动作用于治疗和预防颈部疼痛。同样是10次一组，每天6–8次。&lt;/p&gt;

&lt;p&gt;这个动作要求头部向后拉伸，并且此动作应该总是跟随动作1的练习。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;保持坐姿，重复几次动作1，将动作固定在头部后撤状态&lt;/li&gt;
  &lt;li&gt;抬起下巴向后仰头，这个过程中避免颈部向前位移&lt;/li&gt;
  &lt;li&gt;后仰达到最大限度时，开始向左转头，幅度大约是鼻尖移动2cm位置，然后回位，向右转，转头动作不要太过缓慢&lt;/li&gt;
  &lt;li&gt;接着回到初始动作（头部撤回状态）&lt;/li&gt;
  &lt;li&gt;然后重复后仰，左右转头，每次动作都应该尽量让动作达到最大程度拉伸&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://s3-ap-southeast-1.amazonaws.com/image-for-articles/image-bucket-1/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7+2018-06-28+%E4%B8%8B%E5%8D%882.25.36.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;如果这个练习产生了让你无法忍受的疼痛，可以尝试用动作4来替代&lt;/em&gt;。一旦你熟悉了动作1和2，可以将两个动作整合为一个练习。即先做头部回撤，然后后仰，转头，作为一个连贯动作。&lt;/p&gt;

&lt;h3 id=&quot;动作3-卧姿头部回撤---head-retraction-in-lying&quot;&gt;动作3： 卧姿头部回撤 - Head retraction in lying&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;放松地平躺在床上，不要使用枕头&lt;/li&gt;
  &lt;li&gt;跟动作1一样往后回撤头部，整个过程中保持头部正视天花板，即不要仰头或压低头部&lt;/li&gt;
  &lt;li&gt;回撤动作达到极限时，保持几秒钟，然后放松回到起始姿势，这样就是完整的1次练习&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://s3-ap-southeast-1.amazonaws.com/image-for-articles/image-bucket-1/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7+2018-06-28+%E4%B8%8B%E5%8D%882.48.20.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;同样10次算一组，每天重复6–8组&lt;/p&gt;

&lt;p&gt;这个动作主要用于治疗严重的颈部疼痛，在你做完一组练习后应该立即评估一下疼痛的情况，如果疼痛呈现中心化趋势或者有所缓解，那么你可以进行后续的练习，如果疼痛不但没有减轻反而加重，或者疼痛范围向更大范围扩张，那么你应该停止练习，寻求专业医生的帮助。&lt;/p&gt;

&lt;h3 id=&quot;动作4-卧姿头部后仰拉伸---neck-extension-in-lying&quot;&gt;动作4： 卧姿头部后仰拉伸 - Neck extension in lying&lt;/h3&gt;

&lt;p&gt;这个动作应该总是跟随动作3，并且在仰卧状态下进行。这个动作用于治疗严重的颈部疼痛，这个动作&lt;strong&gt;每组只做 1 次&lt;/strong&gt;。当急性疼痛消退之后，应该使用动作1和2来替代3和4。你会发现其实动作34和12实质上是一样的，只不过3和4用床作为辅助分担了部分练习动作的压力。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;仰卧，用一只手托住头部，然后慢慢将头部移出床面，直至肩部上方悬空&lt;/li&gt;
  &lt;li&gt;接着慢慢放下托住头的那只手，让头部悬空&lt;/li&gt;
  &lt;li&gt;然后向左向右转动头部，幅度也是鼻尖移动2cm左右，动作不要过慢&lt;/li&gt;
  &lt;li&gt;做这个动作时要尽量让头部后仰到最大程度，做完相应次数后可以保持头部悬垂休息半分钟&lt;/li&gt;
  &lt;li&gt;准备恢复平躺姿势时还是先用一只手托住头部下方，然后慢慢移回到床面上&lt;/li&gt;
  &lt;li&gt;不要立即起身，让自己休息几分钟&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://s3-ap-southeast-1.amazonaws.com/image-for-articles/image-bucket-1/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7+2018-06-28+%E4%B8%8B%E5%8D%882.59.47.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;动作5-侧向头部拉伸---sidebending-of-the-neck&quot;&gt;动作5： 侧向头部拉伸 - Sidebending of the neck&lt;/h3&gt;

&lt;p&gt;这个动作专门针对只有一侧疼痛并且通过动作1和2的练习并无好转的案例，或者某一侧疼痛比另一侧严重很多的案例。&lt;/p&gt;

&lt;p&gt;在症状减轻之前，动作5每组做5次，每天6–8次。&lt;/p&gt;

&lt;p&gt;Bend your neck sideways and move your head towards the side on which you feel most of the pain&lt;/p&gt;

&lt;p&gt;头部倒向最不舒服那一侧。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;放松而挺直地坐立，重复几次动作1，然后保持住头部回撤状态&lt;/li&gt;
  &lt;li&gt;缓慢将头部侧向弯至你感觉最痛的一侧，整个过程不要转动头部，保持住耳朵一直朝向肩膀，并且一直保持头部的回撤&lt;/li&gt;
  &lt;li&gt;可以用手臂辅助用力来增强练习的效果&lt;/li&gt;
  &lt;li&gt;在拉伸的极限位置保持数秒，然后回到初始姿势&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://s3-ap-southeast-1.amazonaws.com/image-for-articles/image-bucket-1/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7+2018-06-28+%E4%B8%8B%E5%8D%883.14.49.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;动作6-转头拉伸---neck-rotation&quot;&gt;动作6： 转头拉伸 - Neck rotation&lt;/h3&gt;

&lt;p&gt;这个动作用于治疗和预防颈部疼痛。当用于治疗颈部疼痛或僵硬时，这个动作10次为一组，每天6–8组。不管疼痛是否减轻，做完这个动作后，总是应该跟着动作1和2的练习。如果是用于预防，每组只需要做5–6次。&lt;/p&gt;

&lt;p&gt;Note that in the majority of cases, stiffness on rotation is caused by a blockage at the back of the joint that must be dealt with by performing Exercises 1 and 2. Only do Exercise 6 if your neck pain or headache is not helped by Exercises 1 and 2.&lt;/p&gt;

&lt;p&gt;注意在大多数案例中，转动头部时如果感到僵硬，那么多是由颈部后侧关节阻塞造成的–这类问题必须经由动作1和2治疗。因此只有当你的颈部或头部疼痛无法通过动作1和2的练习缓解时，你才必须要做动作6的练习。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;重复几次动作1，保持住头部回撤状态&lt;/li&gt;
  &lt;li&gt;向一侧持续转头，直至极限。此过程中保持住回撤状态，如果在转向某一侧时感受到更明显的疼痛，那么持续地转向这一侧。这个练习应该能让疼痛呈现中心化并且缓解的趋势。&lt;/li&gt;
  &lt;li&gt;如果疼痛没有呈现出中心化或缓解的趋势，那么就持续往不那么痛的一侧转动。&lt;/li&gt;
  &lt;li&gt;当两侧疼痛的程度几乎一致时，可以平均两边的转动次数&lt;/li&gt;
  &lt;li&gt;你可以使用双手辅助用力来增加练习效果&lt;/li&gt;
  &lt;li&gt;转动到极限时保持几秒，然后回到初始姿势&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://s3-ap-southeast-1.amazonaws.com/image-for-articles/image-bucket-1/6.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;动作7-坐姿前屈拉伸---neck-flexion-in-sitting&quot;&gt;动作7： 坐姿前屈拉伸 - Neck flexion in sitting&lt;/h3&gt;

&lt;p&gt;这个动作用于颈部疼痛的治疗和预防。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;以放松直立的方式坐立&lt;/li&gt;
  &lt;li&gt;放松地向前低头，让下巴尽量靠近胸膛&lt;/li&gt;
  &lt;li&gt;双手从前方伸出保住头部，手指并拢，让肘部自然下垂，用手臂重力自然下压头部，使下巴更加接近胸膛&lt;/li&gt;
  &lt;li&gt;可以用手施加额外力量来下压，增加效果&lt;/li&gt;
  &lt;li&gt;保持下压姿势几秒后恢复初始姿势&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://s3-ap-southeast-1.amazonaws.com/image-for-articles/image-bucket-1/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7+2018-06-28+%E4%B8%8B%E5%8D%884.24.57.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;-&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://s3-ap-southeast-1.amazonaws.com/image-for-articles/image-bucket-1/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7+2018-06-28+%E4%B8%8B%E5%8D%884.25.08.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This exercise is used specifically for the treatment of headaches, but can also be applied to resolve residual neck pain or stiffness once the acute symptoms have subsided.
In both cases it should be repeated only two or three times per session, with the sessions spread evenly six to eight times throughout the day. When used in the treatment of headaches, Exercise 7 should be performed in conjunction with Exercise 1. When used in the treatment of neck pain or stiffness, Exercise 7 must always be followed by Exercises 1 and 2.&lt;/p&gt;

&lt;p&gt;这个动作尤其针对头痛的情况，但也可以用于消除急性症状消减后的残余痛感或僵硬感。上述两种情况下，这个动作都&lt;strong&gt;只做2到3次&lt;/strong&gt;，每天6–8次。当用于治疗头痛时，动作7应该和动作1结合起来。如果是用于治疗颈部疼痛和僵硬，动作7之后必须接着做动作1和2。&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;chapter-6-when-to-apply-the-exercises---什么时候应该做练习&quot;&gt;Chapter 6: When to apply the exercises - 什么时候应该做练习&lt;/h3&gt;

&lt;h4 id=&quot;61-when-you-are-in-significant-pain---当你感觉很痛的时候&quot;&gt;6.1 When you are in significant pain - 当你感觉很痛的时候&lt;/h4&gt;

&lt;p&gt;如果疼痛已经让你无法找到一个舒服的坐立或工作姿势，那么我推荐 动作1 ，许多人都反应这个动作对疼痛的缓解效果最好。接着做动作2的练习。&lt;/p&gt;

&lt;p&gt;如果你做了几组练习后发现疼痛仍然剧烈，你可以使用3和4来代替。疼痛缓解之后再，恢复到动作1和2.&lt;/p&gt;

&lt;p&gt;整个过程你都应该密切观察自己的疼痛变化，任何不确定情况都应该立即咨询专业医生。&lt;/p&gt;

&lt;h4 id=&quot;62-when-you-have-headaches---当你头痛的时候&quot;&gt;6.2 When you have headaches - 当你头痛的时候&lt;/h4&gt;

&lt;p&gt;头痛的症状通常都能通过动作7和1的练习得到很好的缓解，且连续几天做这两个动作不会对你造成任何伤害。&lt;/p&gt;

&lt;p&gt;在头痛开始的3天你可以只做动作1的练习，如果症状没能停止，那么你再加上动作7的练习。7尤其能缓解头痛延伸至头顶以及眼底的案例。&lt;/p&gt;

&lt;p&gt;如果1和7的组合没有效果，尝试强化动作1的练习，即在回撤的极限姿势用双手让头部在回撤姿势保持1到2分钟，并且在接下来的3天进行 动作4 + 动作1 + 动作2 的组合练习。当症状开始减轻之后，你可以停止动作4，但1和2必须继续。&lt;/p&gt;

&lt;p&gt;如果使用各种组合练习之后头痛没有缓解，你应该咨询专业医师。&lt;/p&gt;

&lt;h4 id=&quot;63-no-response-or-benefit---没有好转迹象时&quot;&gt;6.3 No response or benefit - 没有好转迹象时&lt;/h4&gt;

&lt;p&gt;如果你只是一侧的症状很明显，那么前面提到的练习方法可能效果不好。这种情况下你可以先练习动作5作为开头，然后必须跟着 动作1 + 动作2 的组合。几天后如果症状开始平均化和减轻，那么可以逐渐停止动作5。&lt;/p&gt;

&lt;h4 id=&quot;64-when-acute-pain-has-subsided---当急性疼痛开始缓解时&quot;&gt;6.4 When acute pain has subsided - 当急性疼痛开始缓解时&lt;/h4&gt;

&lt;p&gt;当急性疼痛消失后，你可能仍会感觉残余的疼痛或僵硬，尤其在你做某些转头动作时。这表明受损的软组织正处于恢复阶段，此时你应该保证这些软组织在修复过程中保持灵活性并避免二次伤害的出现。&lt;/p&gt;

&lt;p&gt;如果转头时你感到疼痛，那么练习动作6，如果是低头时疼痛，练习动作7。&lt;/p&gt;

&lt;p&gt;每次练习，都应该将动作做至疼痛边缘，然后开始放松。残余的症状应该会在几周内消失。注意，6或7的练习之后总要跟着动作1和动作2的练习。&lt;/p&gt;

&lt;p&gt;如果你只是感到僵硬，那么练习时用手辅助增加额外的力量让动作达到最大幅度，症状应该会在3–6周内消失。&lt;/p&gt;

&lt;p&gt;一旦症状完全消失，你应该继续保持规律的练习。&lt;/p&gt;

&lt;h4 id=&quot;65-当你没有痛感或僵硬感时---when-you-have-no-pain-or-stiffness&quot;&gt;6.5 当你没有痛感或僵硬感时 - When you have no pain or stiffness&lt;/h4&gt;

&lt;p&gt;如果你只是以往偶尔有过不适的感觉，那么你也可以现在开始练习。但你没必要练习上面提到的所有动作。&lt;/p&gt;

&lt;p&gt;你可以进行 动作6 + 动作1 + 动作2 的组合练习，并且随时关注自己的姿势是否正确。&lt;/p&gt;

&lt;h4 id=&quot;66-recurrence-复发时&quot;&gt;6.6 Recurrence 复发时&lt;/h4&gt;

&lt;p&gt;复发时可以首先使用 1 + 2 的组合，如果痛感太明显可以换成 3 + 4.&lt;/p&gt;

&lt;p&gt;如果只是一侧有症状，你可以从动作5开始，然后进行1和2.&lt;/p&gt;

&lt;h3 id=&quot;chapter-7when-acute-neck-pain-strikes---当突发疼痛时&quot;&gt;Chapter 7：When acute neck pain strikes - 当突发疼痛时&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;永远保持正确的姿势。使用错误的姿势无法让你维持正常的颈椎曲度。&lt;/li&gt;
  &lt;li&gt;永远保持头部直立，不管你是在看书、织毛衣还是做什么其他活动时，保持低头姿势只会给你已经受损的韧带和软组织增加更多伤害。&lt;/li&gt;
  &lt;li&gt;不要做快速的头部运动，尤其是快速转头。&lt;/li&gt;
  &lt;li&gt;当伤害已经造成，你需要一段时间来让愈合发生。&lt;/li&gt;
  &lt;li&gt;不要无故增加枕头的数量。枕头的填充物应该能够通过调整提供良好的支持。&lt;/li&gt;
  &lt;li&gt;如果你在晚上感到不适，那么使用颈部圆枕或许可以帮助你。&lt;/li&gt;
  &lt;li&gt;不要趴着睡，这会给颈部施加巨大的压力。&lt;/li&gt;
  &lt;li&gt;不要长时间泡澡，弯曲的脊柱姿势没有好处。&lt;/li&gt;
  &lt;li&gt;谨慎的开始你的自我治疗程序，记住在开始阶段你可能会有疼痛增加的情况，随着练习的进行疼痛应该呈现中心化和缓解的趋势。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;如果没有严格按照作者要求进行练习，或者没有按照书中所强调的在出现不确定情况时及时向专业医生求助，作者和译者不承担任何责任。&lt;/strong&gt;&lt;/p&gt;</content><author><name>Xullnn</name></author><category term="Life" /><category term="health" /><category term="reading notes" /><summary type="html">如书名所述，一本关于如何自我治疗颈椎的书。</summary></entry></feed>